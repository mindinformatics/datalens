<?php

// Show PHP errors (during development only)
    //error_reporting(E_ALL | E_STRICT);
    //ini_set("display_errors", 2);

/**
* Implements hook_menu().
*/

function hboxplot_menu() {
  $items['forest-plot'] = array(
    'title' => 'Forest Plot',
    'description' => 'Forest Plot using D3 visualization',
    'page callback' => 'hboxplot_page',
    'access callback' => TRUE,
);

  return $items;
}

function hboxplot_page() {

  $page = "";

  //dsm($block);

  $hplot_form = drupal_get_form('choosegene_form');
  $page .= drupal_render($hplot_form);

  return $page;
}


/**
 * Implements hook_block_info().
 *
 * This hook declares what blocks are provided by the module.
 */


function hboxplot_block_info() {
  $blocks = array();
  $blocks['hboxplot_block1'] = array(
    // info: The name of the block.
    'info' => t('AD-Normal Microarray'),
  );
  $blocks['hboxplot_block2'] = array(
    // info: The name of the block.
    'info' => t('B3-B1 Microarray'),
  );
  $blocks['hboxplot_block3'] = array(
    // info: The name of the block.
    'info' => t('Legend'),
  );
  $blocks['hboxplot_block4'] = array(
    // info: The name of the block.
    'info' => t('AD-Normal RNA-Seq'),
  );
  $blocks['hboxplot_block5'] = array(
    // info: The name of the block.
    'info' => t('B3-B1 RNA-Seq'),
  );
  $blocks['hboxplot_block6'] = array(
    // info: The name of the block.
    'info' => t('Boxplot Legend Spacer'),
  );

  return $blocks;
}


/**
 * Implements hook_block_view().
 *
 * This hook generates the contents of the blocks
 */
function hboxplot_block_view($delta = '') {
  //The $delta parameter tells us which block is being requested.
  $block = array();
  $gene=$form_state['values']['input_gene'];

  switch ($delta) {
    case 'hboxplot_block1':
      if (user_is_logged_in()) {
      	$block['subject'] = t("AD-NCI Microarray");
		    $data_rows = hboxplot_query_mongo("DCLK1", array("uArray"), "AD-NCI", "CpDxAll");
		    //dsm($data_rows);
		    $block['content'] = $gene;
		    $block['content'] .= hboxplot_block('vis1', $data_rows);
		    //$block['content'] = hboxplot_block('vis1', 'CD33.csv');
	  }
		break;
    case 'hboxplot_block2':
      if (user_is_logged_in()) {
		  $block['subject'] = t("B3-B1 Microarray");
		  $data_rows = hboxplot_query_mongo("DCLK1", array("uArray"), "B3-B1", "Braak");
		  $block['content'] = hboxplot_block('vis2',$data_rows);
		  //$block['content'] = hboxplot_block('vis2', 'CD33-Braak.csv');
      }
      break;
    case 'hboxplot_block3':
      if (user_is_logged_in()) {
		  $block['subject'] = t("Legend");
		  $block['content'] = "<img src='/sites/all/themes/scf_theme/HBoxplot/Legend.png' style='width:100%;'/>";
      }
      break;
    case 'hboxplot_block4':
      if (user_is_logged_in()) {
		  $block['subject'] = t("AD-NCI RNA-Seq");
		  $data_rows = hboxplot_query_mongo("CD33", array("RC","FPKM"), "AD-NCI", "CpDxAll");
		  $block['content'] = hboxplot_block('vis4', $data_rows);
		  //$block['content'] = hboxplot_block('vis4', 'CD33-RNASeq.csv');
      }
      break;
    case 'hboxplot_block5':
      if (user_is_logged_in()) {
		  $block['subject'] = t("B3-B1 RNA-Seq");
		  $data_rows = hboxplot_query_mongo("CD33", array("RC","FPKM"), "B3-B1", "Braak");
		  $block['content'] = hboxplot_block('vis5', $data_rows);
		  //$block['content'] = hboxplot_block('vis5', 'CD33-RNASeq-B3-B1.csv');
      }
      break;
    case 'hboxplot_block6':
      if (user_is_logged_in()) {
		  $block['subject'] = t("");
		  $block['content'] = "";
      }
      break;
  }
  return $block;
}

function hboxplot_block($id, $rows) {
  $path = libraries_get_path('d3.hboxplot');
  libraries_load('d3.hboxplot');

  $chart = array(
    'id' => $id,
    'type' => 'hboxplot',
    'rows' => $rows,
  );

  return d3_draw($chart);
}

function hboxplot_block_file($id, $file) {
  $path = libraries_get_path('d3.hboxplot');
  libraries_load('d3.hboxplot');

  $chart = array(
    'id' => $id,
    'type' => 'hboxplot',
    'file' => $file,
  );

  return d3_draw($chart);
}


function choosegene_form($form, &$form_state) {

  $form['input_gene'] = array (
    '#type' => 'textfield',
    '#title' => t('Gene Symbol'),
    '#default_value' => '',
    '#description' => t('Please enter a gene symbol'),
    '#size' => 20,
  );


  $form['submit'] = array(
    '#prefix' => '<div class="hplot-inline">',
    '#suffix' => '</div>',
    '#type' => 'submit',
    '#value' => t('Go'),
    '#ajax' => array(
      'callback' => 'ajax_hplot_callback',
      'wrapper'  => 'hplots',
      'effect'   => 'fade',
     ),
  );


  // Define default study as IGAP
  //if (!isset($form_state['values'])) {
  //  $_SESSION['lzoom_study'] = "IGAP_stage_1.tsv";
  //}

  // Define default plot for CD33


	$data_rows = hboxplot_query_mongo("CD33", array("uArray"), "AD-NCI", "CpDxAll");
	$content1 = "<span id='htitle'>AD-NCI Microarray</span>" .  hboxplot_block('vis1', $data_rows);
	$data_rows = hboxplot_query_mongo("CD33", array("uArray"), "B3-B1", "Braak");
	$content2 = "<span id='htitle'>B3-B1 Microarray</span>" . hboxplot_block('vis2',$data_rows);
	$content3 = "<img src='/sites/all/themes/scf_theme/HBoxplot/Legend.png' style='width:100%;'/>";
	$data_rows = hboxplot_query_mongo("CD33", array("RC","FPKM"), "AD-NCI", "CpDxAll");
	$content4 = "<span id='htitle'>AD-NCI RNA-Seq</span>" . hboxplot_block('vis4', $data_rows);
	$data_rows = hboxplot_query_mongo("CD33", array("RC","FPKM"), "B3-B1", "Braak");
	$content5 = "<span id='htitle'>B3-B1 RNA-Seq</span>" . hboxplot_block('vis5', $data_rows);
  $content6  = "";


  $content = '<div id="hplots">';
  $content .= "<span id='gtitle'>" . "CD33" . "</span>";
  $content .= '<table id="forest-plot">';
  $content .= '<tr><td>';
  $content .= $content1;
  $content .= '</td><td>';
  $content .= $content2;
  $content .= '</td><td>';
  $content .= $content3;
  $content .= '</td></tr><tr><td>';
  $content .= $content4;
  $content .= '</td><td>';
  $content .= $content5;
  $content .= '</td><td>';
  $content .= $content6;
  $content .= '</td></tr>';
  $content .= '</table>';
  $content .= '</div>';

  $form['wrapper'] = array(
    '#markup' => '<div id="hplots">' . $content . '</div>',
  );


	return $form;
}

function ajax_hplot_callback($form, $form_state) {

  $gene= $form_state['values']['input_gene'];

  $data_rows = hboxplot_query_mongo($gene, array("uArray"), "AD-NCI", "CpDxAll");
	$content1 = "<span id='htitle'>AD-NCI Microarray</span>" .  hboxplot_block('vis1', $data_rows);
	$data_rows = hboxplot_query_mongo($gene, array("uArray"), "B3-B1", "Braak");
	$content2 = "<span id='htitle'>B3-B1 Microarray</span>" . hboxplot_block('vis2',$data_rows);
	$content3 = "<img src='/sites/all/themes/scf_theme/HBoxplot/Legend.png' style='width:100%;'/>";
	$data_rows = hboxplot_query_mongo($gene, array("RC","FPKM"), "AD-NCI", "CpDxAll");
	$content4 = "<span id='htitle'>AD-NCI RNA-Seq</span>" . hboxplot_block('vis4', $data_rows);
	$data_rows = hboxplot_query_mongo($gene, array("RC","FPKM"), "B3-B1", "Braak");
	$content5 = "<span id='htitle'>B3-B1 RNA-Seq</span>" . hboxplot_block('vis5', $data_rows);
  $content6  = "";


  $content = '<div id="hplots">';
  $content .= "<span id='gtitle'>" . $gene . "</span>";
  $content .= '<table id="forest-plot">';
  $content .= '<tr><td>';
  $content .= $content1;
  $content .= '</td><td>';
  $content .= $content2;
  $content .= '</td><td>';
  $content .= $content3;
  $content .= '</td></tr><tr><td>';
  $content .= $content4;
  $content .= '</td><td>';
  $content .= $content5;
  $content .= '</td><td>';
  $content .= $content6;
  $content .= '</td></tr>';
  $content .= '</table>';
  $content .= '</div>';

  return $content;

}


function hboxplot_query_mongo($input_gene, $data_type, $contrast, $strat_factor) {


    if (empty($input_gene)) {
      $gene_list = array('PRELP');
    } else {
      $input_gene = strtoupper($input_gene);
      //Explode whitespace (tabs, new lines, spaces) and commas; old: $gene_list = explode(",", $input_genes);
      $gene_list = preg_split('/[\s ,]+/', $input_gene);
      $gene_list = array_filter($gene_list);
      $trimmed_array = array_map('trim', $gene_list);
      $gene_list = $trimmed_array;
      $species = array("human");
      $gene_list = array_map('_query_synonyms', $gene_list, $species);
      //var_dump($gene_list);

    }


    // Create a Mongo connection and connect to database //echo $db;
    $mongo = new MongoClient("mongodb://localhost");
    $db = $mongo->cats;

    // Select the expression collection for gene expression info
    $coll = $db->human_expression;

    // Filter on gene
    //db.human_expression.find({"GeneSymbol":"CD33","Contrast":"AD-NCI","StratFactor":"CpDxAll"}).count()
    //$query = array("GeneSymbol" => array('$in' => $gene_list));
    $query = array( '$and' => array( array("GeneSymbol" => array('$in' => $gene_list)),
             array('DataType' => array('$in' => $data_type)),
             array('Contrast' => $contrast),
             array('StratFactor' => $strat_factor),
             ) );

    //dsm($query);

    $cursor = $coll->find($query);
    $cursor->timeout(-1);
    $cursor->sort(array('Rank' => 1));
    $cursor->limit( 500 );
    //$total = (string)$cursor->count(); //To find total number of documents
    //dsm($total);
    //$cursor->limit( 5 );

     //Access query results
     $result = array();
     $filenames = array();
     $i = 0;

     //Study,BrainRegion,Technology,logFC,CIL,CIR,PValue,median,min,max,Rank,row
     foreach ($cursor as $doc) {
       //var_dump($doc);
       $result[$i]['Study'] = $doc['StudyName'];
       $result[$i]['BrainRegion'] = $doc['BrainRegionCode'];
       $result[$i]['Technology'] = $doc['DataType'];
       $result[$i]['FileName'] = $doc['FileName'];
       $result[$i]['ProbeID'] = !empty($doc['ProbeID']) ? $doc['ProbeID'] : "";
       $result[$i]['logFC'] = $doc['logFC'];
       $result[$i]['CIL'] = $doc['CIL'];
       $result[$i]['CIR'] = $doc['CIR'];
       $result[$i]['PValue'] = $doc['PValue'];
       $result[$i]['median'] = $doc['median'];
       $result[$i]['min'] = $doc['min'];
       $result[$i]['max'] = $doc['max'];
       $result[$i]['Rank'] = $doc['Rank'];
       $filenames[] = $doc['FileName'];
       $i++;
     }

  //Some genes have multiple probes; these will appear in the same file.
   if ($data_type[0] == "uArray" ) {
      //var_dump("All Filenames");
      //var_dump($filenames);
      $dup_files =  _array_dup($filenames);
      //var_dump("Duplicate Files");
      //var_dump($dup_files);



      foreach ($dup_files as $dup) {
        $abs_logfc = array();
        $array_id = array();
        $probe_id = array();
        //find it


        //probes = result['Filename'] == $dup
        //find max probe
        //unset everyting that is not the max

        foreach ($result as $key => $value ) {
          if ($value['FileName'] == $dup) {
            $array_id[] = $key;
            $abs_logfc[] = abs($value['logFC']);
            $probe_id[] = $value['ProbeID'];
            //dsm($array_id);
          }
        }

        $max_val = max($abs_logfc);
        $index = array_search(max($abs_logfc),$abs_logfc);

        //dsm($array_id);
        //dsm("Max abs logFC");
        //dsm($max_val);
        //dsm("Index of max");
        //dsm($index);

        foreach($array_id as $key=>$value) {
          if ($key != $index) {
            unset($result[$value]);
          }
        }

      }
   }



  //dsm($result);

  return $result;

}


function _array_dup($ar){
   return array_unique(array_diff_assoc($ar,array_unique($ar)));
}



?>
