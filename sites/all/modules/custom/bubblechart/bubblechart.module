<?php

// Show PHP errors (during development only)
    //error_reporting(E_ALL | E_STRICT);
    //ini_set("display_errors", 2);

/**
 * Implements hook_block_info().
 *
 * This hook declares what blocks are provided by the module.
 */
function bubblechart_block_info() {
  $blocks = array();
  $blocks['bubble_block'] = array(
    // info: The name of the block.
    'info' => t('Bubble Chart Block: D3 Viz'),
  );
  return $blocks;
}


/**
 * Implements hook_block_view().
 *
 * This hook generates the contents of the blocks
 */
function bubblechart_block_view($delta = '') {
  //The $delta parameter tells us which block is being requested.
  switch ($delta) {
    case 'bubble_block':
      $path = libraries_get_path('d3.bubblechart');
      //echo $path;
      drupal_add_css($path . '/bubblechart.css');

      $genes = 'PRELP';
      $pval = 0.05;

      $result = _query_mongo($genes, $pval);


      $study_checkbox = _create_facet($result, 'Study');    // Returns string 35-44
      $contrast_checkbox = _create_facet($result, 'Contrast');
      $datatype_checkbox = _create_facet($result, 'DataType');
      $br_checkbox = _create_facet($result, 'BrainRegion');



      $block['content'] = '<div id="facet-group">';

      $block['content'] .= $study_checkbox . $contrast_checkbox .  $datatype_checkbox .  $br_checkbox;
      $block['content'] .= '</div>';
      $block['content'] .=  t(

      '<div id="slider-area">
      <div id="PValue" class="slider">
        <h4>PValue</h4><input type="text" id="PValText" class="slider-text">
        <input type="range" id="sliderPVal">
      </div>
      <div id="FCValue" class="slider">
        <h4>FCValue</h4><input type="text" id="FCValText" class="slider-text">
        <input type="range" id="sliderFCVal">
      </div>
      </div>
      <div id="legend"></div>'
      );

      $block['content'] .= _call_genomics($result);

      break;
  }
  return $block;
}



/**
* Implements hook_menu().
*/
function bubblechart_menu() {
  $items['bubbles'] = array(
    'title' => 'D3 visualization',
    'description' => 'Different visualization examples using d3.',
    'page callback' => 'bubblechart_csv',
    'access callback' => TRUE,
  );
  $items['genomics/%'] = array(
    'title' => 'Expression Data Bubblechart',
    'description' => 'Return expression data',
    'page callback' => 'bubblechart_genomics',
    'page arguments' => array(1),
    'access callback' => TRUE,
  );
  $items['input'] = array(
    'title' => 'Gene Symbols input',
    'description' => 'Input genes to return expression data',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('bubblechart_form'),
    'access callback' => TRUE,
    'type' => MENU_NORMAL_ITEM,
  );
  $items['analysis'] = array(
    'title' => 'Gene Expression',
    'description' => 'Gene expression from SAGE',
    'page callback' => 'bubblechart_table',
    'access callback' => TRUE,
  );

  return $items;
}

function bubblechart_csv() {

  $chart = array(
    'id' => 'visualization',
    'type' => 'bubblechartcsv',
  );

  return d3_draw($chart);
}

function bubblechart_genomics($input_genes) {

  $pval = 0.05;
  $result = _query_mongo($input_genes, $pval);

  return _call_genomics($result);
}

function _call_genomics($result) {
    //dsm($result);

    //$terms = array_column($result, 'parent');
    $terms = array_map(function($element){return $element['parent'];}, $result);
    //$terms = array_filter($result, "parent");
    //dsm($terms);
    $terms_unique = array_flip($terms);
    //dsm($terms_unique);

    //$vid = 21;
    $parents = array();
    foreach ($terms_unique as $key => $value) {
      $term_object = taxonomy_get_term_by_name($key);
      $tid = array_pop($term_object)->tid;
      $parent_object = taxonomy_get_parents($tid);
      if (empty($parent_object)){
        $parents[] = $key;
      } else {
        $parent_name = array_pop($parent_object)->name;
        $result[] = array('size' => 5, 'parent' => $parent_name, 'name' => $key, 'PValue' => 0);
        $parents[] = $parent_name;
      }
    }
    $parents_unique = array_flip($parents);
    //dsm($parents_unique);
    //var_dump($parents_unique);
    foreach($parents_unique as $key => $value){
      $result[] = array('size' => 5, 'parent' => 'WB', 'name' => $key, 'PValue' => 0);
    }
    $result[] = array('size' => 5, 'parent' => 'null', 'name' => 'WB', 'PValue' => 0);
    //dsm($result);

    //$file_name = 'Test_input.txt';
    //$lines = array_values($result);
    //$file_lines = implode("\n", $lines);
    //file_save_data($file_lines, 'public://' . $file_name);
    //var_dump($result);
    //dsm($result);

    //error-checking:
    //db.expression.find( { GeneSymbol: { $in: [ "RHEB", "SKA1" ]} }, { FileName: 1, GeneSymbol: 1, logFC:1, PValue:1, adjPVal:1, B:1 } ).limit( 5 );

    $chart = array(
      'id' => 'visualization',
      'type' => 'bubblechart',
      'rows' => $result,
    );

    return d3_draw($chart);
}


/**
 * Return a form used to input gene names into bubblechart
 *
 * @return
 *   An array which will be used by the form builder to build the import form
 */

function bubblechart_form($form, &$form_state) {
  $form['input_genes'] = array (
    '#type' => 'textarea',
    '#title' => t('Gene Symbols'),
    '#default_value' => '',
    '#description' => t('Paste a comma separated list of gene symbols'),
    '#size' => 60
  );

  $form['submit'] = array(
    '#type' => 'submit',
    '#value' => t('Submit'),
  );

	return $form;
}

/**
 * Implementation of hook_validate() for the bubblechart_input.
 */

function bubblechart_form_validate($form, & $form_state) {
	 $valid_genes = $form_state['values']['input_genes'];

}

function bubblechart_form_submit($form, & $form_state) {
	$valid_genes = $form_state['values']['input_genes'];

	drupal_set_message(t('Your genes are %genes.', array('%genes' => $valid_genes)));
	//return drupal_render(drupal_get_form('bubblechart_form'));

	$form_state['redirect'] = 'genomics/' . $valid_genes;
}

function bubblechart_views_post_execute(&$view) {

}

function bubblechart_views_pre_render(&$view) {
  //dsm($view->exposed_input);

  if($view->name=='evidence'){
    //dsm($view);
    //dsm($view->exposed_input);
    //dsm($view);

    if (empty($view->exposed_input['field_genes_diff_tid']) &&
        empty($view->exposed_input['term_node_tid_depth']) &&
        empty($view->exposed_input['term_node_tid_depth_1']) &&
        empty($view->exposed_input['field_contrast_tid']) &&
        empty($view->exposed_input['field_fold_change_value']) &&
        empty($view->exposed_input['term_node_tid_depth_2']) ) {
        $view->result = array();
        $view->total_rows = 0;
        $view->query->pager->total_items = 0;
        $view->query->pager->update_page_info();
    }

    if (!empty($view->exposed_input['field_genes_diff_tid'])) {
      $gene_list = $view->exposed_input['field_genes_diff_tid'];
      //dsm($gene_list);
      //var_dump($gene_list);
      $pval=$view->exposed_input['field_pvalue_value'];
      $mongo_array = _query_mongo($gene_list, $pval);
      $filtered_mongo = $mongo_array;
      //var_dump($mongo_array);

      // Brain Region
      if (!empty($view->exposed_input['term_node_tid_depth'])) {
        $brain_region = $view->exposed_input['term_node_tid_depth'];
        //dsm($brain_region);
        $terms = array();
        foreach($brain_region as $tid) {
          $term = taxonomy_term_load($tid)->name;
          array_push($terms, $term);
          }
          //dsm($terms);
          $filtered_mongo = array_filter($filtered_mongo,
          function($v) use ($terms){
            return in_array($v['BrainRegion'], $terms);
            });
          //dsm($filtered_mongo);
      }

      // Data Type
      if (!empty($view->exposed_input['term_node_tid_depth_1'])) {
        $data_type = $view->exposed_input['term_node_tid_depth_1'];
        //dsm($data_type);
        $terms = array();
        foreach($data_type as $tid) {
          $term = taxonomy_term_load($tid)->name;
          if ($term === "Array Expression" ) {
            $term = "uArray";
          }
          if ($term === "RNA-seq" ) {
            array_push($terms, "CPM", "RC", "FPKM");

          } else {
            array_push($terms, $term);
          }
        }
          //dsm($terms);
          $filtered_mongo = array_filter($filtered_mongo,
          function($v) use ($terms){
            return in_array($v['DataType'], $terms);
            });
          //dsm($filtered_mongo);
      }

      // Group/Study
      if (!empty($view->exposed_input['term_node_tid_depth_2'])) {
        $study = $view->exposed_input['term_node_tid_depth_2'];
        //dsm($data_type);
        $terms = array();
        foreach($study as $tid) {
          $term = taxonomy_term_load($tid)->name;
          //dsm($terms);
          $filtered_mongo = array_filter($filtered_mongo,
          function($v) use ($terms){
            return in_array($v['Study'], $terms);
            });
          //dsm($filtered_mongo);
        }
      }


      // Fold Change
      if (!empty($view->exposed_input['field_fold_change_value'])) {
        $fc_gt = $view->exposed_input['field_fold_change_value'];
        //dsm($fc_gt);
        $filtered_mongo = array_filter($filtered_mongo,
        function($v) use ($fc_gt){return pow(2,abs($v['LogFC'])) >= $fc_gt;});
      }


      // Contrast
      if (!empty($view->exposed_input['field_contrast_tid'])) {
        $contrast = $view->exposed_input['field_contrast_tid'];
        //dsm($contrast);
        $terms = array();
        foreach($contrast as $tid) {
          $term = taxonomy_term_load($tid)->name;
          array_push($terms, $term);
        }
          //dsm($terms);
          $filtered_mongo = array_filter($filtered_mongo,
          function($v) use ($terms){
            return in_array($v['Contrast'], $terms);
          });
      }

      if (!empty($view->exposed_input['field_pvalue_value'])) {
        $pvalue = $view->exposed_input['field_pvalue_value'];
        //dsm($pvalue);
        $filtered_mongo = array_filter($filtered_mongo,
        function($v) use ($pvalue){return $v['PValue'] < $pvalue;});

      }

      $new_result_array = array();
      foreach($filtered_mongo as $row) {
         //$row[] = array($value['Study'], $value['BrainRegion'], $value['DataType'], $value['Contrast'], $value['GeneSymbol'], $value['LogFC'], $value['PValue'], $value['AdjPVal'], $value['FileName']););
        $analysis_nid = intval(_query_analysisId($row['FileName']));
        $input_study_nid = intval(_query_inputId($analysis_nid));
        //var_dump($analysis_id);
        $temp = new stdClass;
        $temp->node_title = $row['GeneSymbol'] . " " . $row['ProbeID'];
        $temp->field_field_probe_id[0]['rendered']['#markup'] = $row['ProbeID'];
        $temp->field_field_pvalue[0]['raw']['value'] = $row['PValue'];
        $temp->field_field_fold_change[0]['raw']['value'] = $row['LogFC'];
        $temp->field_field_fold_change[0]['rendered']['#markup'] = $row['LogFC'];
        $temp->field_field_result_data[0]['raw']['target_id'] = _query_analysisId($row['FileName']);
        $temp->field_field_result_data[0]['rendered']['#markup'] = '<a href="/node/' . $analysis_nid . '">' . $row['FileName'] . '</a>';
        $temp->field_field_brain_region[0]['rendered']['#markup']= $row['BrainRegion'];
        $temp->field_field_data_type[0]['rendered']['#markup'] = $row['DataType'];
        $temp->field_field_input[0]['rendered']['#markup'] = '<a href="/node/' . $input_study_nid . '">' . $row['Study']. '</a>';
        $new_result_array[] = $temp;
      }


      $view->result = $new_result_array;
      $view->total_rows = count($new_result_array);
      //$view->query->pager->total_items = count($new_result_array);
      //$view->query->pager->update_page_info();

    }

  }
}

function _query_analysisId($input) {
    $query = db_select('field_data_field_result', 'fr');
    $query->join('field_data_field_files', 'ff', 'fr.field_result_value = ff.entity_id');
    $query->join('file_managed', 'fm', 'ff.field_files_fid = fm.fid');
    $query->fields('fr', array('entity_id'));
    $query->condition('fm.filename',$input,'=');
    $result = $query->execute()->fetchfield();
    return($result);

}

function _query_inputId($input) {
    //select field_input_target_id from field_data_field_input where entity_id =
    $query = db_select('field_data_field_input', 'fi');
    $query->fields('fi', array('field_input_target_id'));
    $query->condition('fi.entity_id',$input,'=');
    $result = $query->execute()->fetchfield();
    return($result);

}

function _query_synonyms($input) {

    // First check gene
    $query = db_select('taxonomy_term_data', 'tt');
    $query->fields('tt', array('tid'));
    $query->condition('tt.name',$input,'=');
    $tid = $query->execute()->fetchfield();

    if($tid) {
      return($input);
    }
    else {
      // Check synonyms
      $query = db_select('field_data_field_synonyms ', 'fs');
      $query->join('taxonomy_term_data', 'tt', 'fs.entity_id = tt.tid');
      $query->fields('tt', array('name'));
      $query->condition('fs.field_synonyms_value',$input,'=');
      $result = $query->execute()->fetchfield();
      if(!$result) {
        drupal_set_message(t('Cannot find gene @var.', array('@var' => $input)));
      }
      return($result);
    }

}

function _query_mongo($input_genes, $pval) {

    if (empty($input_genes)) {
      $gene_list = array('PRELP');
    } else {
      $input_genes = strtoupper($input_genes);
      //Explode whitespace (tabs, new lines, spaces) and commas; old: $gene_list = explode(",", $input_genes);
      $gene_list = preg_split('/[\s ,]+/', $input_genes);
      $trimmed_array = array_map('trim', $gene_list);
      $gene_list = $trimmed_array;
      $gene_list = array_map('_query_synonyms', $gene_list);
      //var_dump($gene_list);

    }

    if(empty($pval)) {
      $pval=0.05;
    }


    // Create a Mongo connection and connect to database //echo $db;
    $mongo = new MongoClient("mongodb://localhost");
    $db = $mongo->cats;

    // Select the expression collection for gene expression info
    $coll = $db->expression;

    // Filter on genes and p-value
    //$query = array("GeneSymbol" => array('$in' => $gene_list));
    //Mongo on server is version 2.6.12 and p-values in scientific notation were ebing stored as string
    // Fixed by finding p-value that are string and updating to double
    $query = array( '$and' => array( array("GeneSymbol" => array('$in' => $gene_list)),
             array('PValue' => array('$lt' => (float)$pval) ) ) );


    $cursor = $coll->find($query);
    $cursor->timeout(-1);
    //$total = (string)$cursor->count(); //To find total number of documents
    //dsm($total);
    //$cursor->limit( 5 );

     //Access query results
     $result = array();
     $filenames = array();
     $i = 0;

     foreach ($cursor as $doc) {
       //var_dump($doc);
       $result[$i]['FileName'] = $doc['FileName'];
       $result[$i]['GeneSymbol'] = $doc['GeneSymbol'];
       $result[$i]['LogFC'] = $doc['logFC'];
       $result[$i]['PValue'] = $doc['PValue'];
       $result[$i]['ProbeID'] = !empty($doc['ProbeID']) ? $doc['ProbeID'] : "";
       $result[$i]['size'] = abs($doc['logFC']);
       $filenames[] = $doc['FileName'];
       $i++;
     }


// 		 Check the main for the meta data: Study,parent,DataType,Contrast
     $coll2 = $db->main;
     $query2 = array('FileName' => array('$in' => $filenames));
     $cursor2 = $coll2->find($query2);
     $main_result =  array();
     $i = 0;
     foreach ($cursor2 as $doc) {
       $main_result[$i]['FileName'] = $doc['FileName'];
       $main_result[$i]['Study'] = $doc['StudyName'];
       $main_result[$i]['BrainRegion'] = $doc['BrainRegionFull'];
       $main_result[$i]['parent'] = $doc['BrainRegionFull'];
       $main_result[$i]['DataType'] = $doc['DataType'];
       $main_result[$i]['Contrast'] = $doc['Contrast'];
       $i++;
     }
 	  //var_dump($main_result);

 	  // Incorporate main metadata into result array.
 	  $row = array();
    	foreach($result as &$value){
     	$file = $value['FileName'];
     	$main_key = array_search($file, array_map(function($element){return $element['FileName'];}, $main_result));
 		  $value['Study'] = $main_result[$main_key]['Study'];
 		  $value['BrainRegion'] = $main_result[$main_key]['BrainRegion'];
 		  $value['DataType'] = $main_result[$main_key]['DataType'];
 		  $value['Contrast'] = $main_result[$main_key]['Contrast'];
 		  $value['parent'] = $main_result[$main_key]['parent'];
 		  $row[] = array(
 		    'Study' => $value['Study'],
 		    'BrainRegion' => $value['BrainRegion'],
 		    'parent' => $value['parent'],
 		    'DataType' => $value['DataType'],
 		    'Contrast' => $value['Contrast'],
 		    'GeneSymbol' => $value['GeneSymbol'],
 		    'LogFC' => $value['LogFC'],
 		    'PValue' => $value['PValue'],
 		    'FileName' => $value['FileName'],
 		    'ProbeID' => $value['ProbeID'],
 		    'size' => $value['size'],
 		    'name' => $value['GeneSymbol'],
 		    );
 	  }

  return $row;

}

function _create_facet($result, $type) {
  $lines = "";
  if ($type == "Study") {
    $terms = array_map(function($element){return $element['Study'];}, $result);
    $terms_unique = array_flip($terms);
    $lines .= '<div class="list-group"><h4>Study</h4><div class="facet-list">';
    foreach ($terms_unique as $key => $value) {
      $lines .= '<label><input type="checkbox" class="cbox study" value="' . $key . '"> '. $key . '</label><br>';
    }
    $lines .='</div></div>';
  }
  if ($type == "Contrast") {
    $terms = array_map(function($element){return $element['Contrast'];}, $result);
    $terms_unique = array_flip($terms);
    $lines .= '<div class="list-group"><h4>Contrast</h4><div class="facet-list">';
    foreach ($terms_unique as $key => $value) {
      $lines .= '<label><input type="checkbox" class="cbox contrast" value="' . $key . '"> '. $key . '</label><br>';
    }
    $lines .='</div></div>';
  }
  if ($type == "BrainRegion") {
    $terms = array_map(function($element){return $element['BrainRegion'];}, $result);
    $terms_unique = array_flip($terms);
    $lines .= '<div class="list-group"><h4>Brain Region</h4><div class="facet-list">';
    foreach ($terms_unique as $key => $value) {
      $lines .= '<label><input type="checkbox" class="cbox brainRegion" value="' . $key . '"> '. $key . '</label><br>';
    }
    $lines .='</div></div>';
  }
  if ($type == "DataType") {
    $terms = array_map(function($element){return $element['DataType'];}, $result);
    $terms_unique = array_flip($terms);
    $lines .= '<div class="list-group"><h4>Data Type</h4><div class="facet-list">';
    foreach ($terms_unique as $key => $value) {
      $lines .= '<label><input type="checkbox" class="cbox dataType" value="' . $key . '"> '. $key . '</label><br>';
    }
    $lines .='</div></div>';
  }

  //dsm($terms_unique);
  //dsm($lines);

  return($lines);

}




?>
