<?php

// Show PHP errors (during development only)
    //error_reporting(E_ALL | E_STRICT);
    //ini_set("display_errors", 2);

/**
 * Implements hook_block_info().
 *
 * This hook declares what blocks are provided by the module.
 */
function bubblechart_block_info() {
  $blocks = array();
  $blocks['bubble_block'] = array(
    // info: The name of the block.
    'info' => t('Bubble Chart Block: D3 Viz'),
  );
  return $blocks;
}


/**
 * Implements hook_block_view().
 *
 * This hook generates the contents of the blocks
 */
function bubblechart_block_view($delta = '') {
  //The $delta parameter tells us which block is being requested.
  switch ($delta) {
    case 'bubble_block':
      $path = libraries_get_path('d3.bubblechart');
      //drupal_add_js($path . '/libs/' . 'd3.slider.js');
      //drupal_add_js($path . '/libs/' . 'bootstrap.js');
      drupal_add_css($path . '/libs/' . 'bubblechart.css');
      //$block['subject'] = t("Bubble Chart Block");
      $block['content'] =  t('<div id="facet-group">
    <div class="list-group">
      <h4>Study</h4>
      <div class="facet-list">
        <label><input type="checkbox" class="cbox study" value="MSBB"> MSBB</label><br>
        <label><input type="checkbox" class="cbox study" value="HBTRC"> HBTRC</label><br>
        <label><input type="checkbox" class="cbox study" value="MayoBB"> MayoBB</label><br>
        <label><input type="checkbox" class="cbox study" value="MayoEGWAS"> MayoEGWAS</label><br>
        <label><input type="checkbox" class="cbox study" value="ROSMAP"> ROSMAP</label>
      </div>
    </div>
     <div class="list-group">
      <h4>Contrast</h4>
      <div class="facet-list">
        <label><input type="checkbox" class="cbox contrast" value="AD-DNAD"> AD-DNAD</label><br>
        <label><input type="checkbox" class="cbox contrast" value="AD-NCI"> AD-NCI</label><br>
        <label><input type="checkbox" class="cbox contrast" value="AD-PA"> AD-PA</label><br>
        <label><input type="checkbox" class="cbox contrast" value="AD-PC"> AD-PC</label><br>
        <label><input type="checkbox" class="cbox contrast" value="AD-PSP"> AD-PSP</label><br>
        <label><input type="checkbox" class="cbox contrast" value="B2-B1"> B2-B1</label><br>
        <label><input type="checkbox" class="cbox contrast" value="B3-B1"> B3-B1</label><br>
        <label><input type="checkbox" class="cbox contrast" value="B3-B2"> B3-B2</label><br>
        <label><input type="checkbox" class="cbox contrast" value="C1-C0"> C1-C0</label><br>
        <label><input type="checkbox" class="cbox contrast" value="C2-C0"> C2-C0</label><br>
        <label><input type="checkbox" class="cbox contrast" value="C3-C0"> C3-C0</label><br>
        <label><input type="checkbox" class="cbox contrast" value="DNAD-NCI"> DNAD-NCI</label><br>
        <label><input type="checkbox" class="cbox contrast" value="PA-NCI"> PA-NCI</label><br>
        <label><input type="checkbox" class="cbox contrast" value="PC-NCI"> PC-NCI</label><br>
        <label><input type="checkbox" class="cbox contrast" value="PSP-NCI"> PSP-NCI</label>
      </div>
    </div>
    <div class="list-group">
      <h4>Data Type</h4>
      <div class="facet-list">
        <label><input type="checkbox" class="cbox dataType" value="Microarray"> Microarray</label><br>
        <label><input type="checkbox" class="cbox dataType" value="RNA-Seq"> RNA-Seq</label>
      </div>
    </div>
    <div class="list-group">
      <h4>Brain Region</h4>
      <div class="facet-list">
        <label><input type="checkbox" class="cbox brainRegion" value="Amygdala"> Amygdala</label><br>
        <label><input type="checkbox" class="cbox brainRegion" value="Anterior Cingulate"> Anterior Cingulate</label><br>
        <label><input type="checkbox" class="cbox brainRegion" value="Caudate Nucleus"> Caudate Nucleus</label><br>
        <label><input type="checkbox" class="cbox brainRegion" value="Cerebellum"> Cerebellum</label><br>
        <!-- <label><input type="checkbox" class="cbox brainRegion" value="Cingulum"> Cingulum</label><br> -->
        <label><input type="checkbox" class="cbox brainRegion" value="Dorsolateral Prefrontal Cortex"> Dorsolateral Prefrontal Cortex</label><br>
        <!-- <label><input type="checkbox" class="cbox brainRegion" value="Frontal lobe"> Frontal lobe</label><br> -->
        <label><input type="checkbox" class="cbox brainRegion" value="Frontal Pole"> Frontal Pole</label><br>
        <label><input type="checkbox" class="cbox brainRegion" value="Hippocampus"> Hippocampus</label><br>
        <label><input type="checkbox" class="cbox brainRegion" value="Inferior Frontal Gyrus"> Inferior Frontal Gyrus</label><br>
        <label><input type="checkbox" class="cbox brainRegion" value="Inferior Temporal Gyrus"> Inferior Temporal Gyrus</label><br>
        <!-- <label><input type="checkbox" class="cbox brainRegion" value="Limbic system"> Limbic system</label><br> -->
        <label><input type="checkbox" class="cbox brainRegion" value="Middle Temporal Gyrus"> Middle Temporal Gyrus</label><br>
        <label><input type="checkbox" class="cbox brainRegion" value="Nucleus Accumbens"> Nucleus Accumbens</label><br>
        <label><input type="checkbox" class="cbox brainRegion" value="Occipital Visual Cortex"> Occipital Visual Cortex</label><br>
        <label><input type="checkbox" class="cbox brainRegion" value="Parahippocampal Gyrus"> Parahippocampal Gyrus</label><br>
        <label><input type="checkbox" class="cbox brainRegion" value="Posterior Cingulate Cortex"> Posterior Cingulate Cortex</label><br>
        <label><input type="checkbox" class="cbox brainRegion" value="Precentral Gyrus"> Precentral Gyrus</label><br>
        <label><input type="checkbox" class="cbox brainRegion" value="Prefrontal Cortex"> Prefrontal Cortex</label><br>
        <label><input type="checkbox" class="cbox brainRegion" value="Putamen"> Putamen</label><br>
        <!-- <label><input type="checkbox" class="cbox brainRegion" value="Striatum"> Striatum</label><br> -->
        <label><input type="checkbox" class="cbox brainRegion" value="Superior Parietal Lobule"> Superior Parietal Lobule</label><br>
        <label><input type="checkbox" class="cbox brainRegion" value="Superior Temporal Gyrus"> Superior Temporal Gyrus</label><br>
        <label><input type="checkbox" class="cbox brainRegion" value="Temporal Cortex"> Temporal Cortex</label><br>
        <!-- <label><input type="checkbox" class="cbox brainRegion" value="Temporal lobe"> Temporal lobe</label><br> -->
        <label><input type="checkbox" class="cbox brainRegion" value="Temporal Pole"> Temporal Pole</label>
      </div>
    </div>
  </div>

  <div id="slider-area">
    <div id="PValue" class="slider">
      <h4>PValue</h4><input type="text" id="PValText" class="slider-text">
      <input type="range" id="sliderPVal">
    </div>
    <div id="FCValue" class="slider">
      <h4>FCValue</h4><input type="text" id="FCValText" class="slider-text">
      <input type="range" id="sliderFCVal">
    </div>
  </div>'
);

      $block['content'] .= bubblechart_bubblechart();
      break;
  }
  return $block;
}

/**
* Implements hook_menu().
*/
function bubblechart_menu() {
  $items['bubbles'] = array(
    'title' => 'D3 visualization',
    'description' => 'Different visualization examples using d3.',
    'page callback' => 'bubblechart_bubblechart',
    'access callback' => TRUE,
  );
  $items['genomics/%'] = array(
    'title' => 'Expression Data Bubblechart',
    'description' => 'Return expression data',
    'page callback' => 'bubblechart_genomics',
    'page arguments' => array(1),
    'access callback' => TRUE,
  );
  $items['input'] = array(
    'title' => 'Gene Symbols input',
    'description' => 'Input genes to return expression data',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('bubblechart_form'),
    'access callback' => TRUE,
    'type' => MENU_NORMAL_ITEM,
  );

  return $items;
}

function bubblechart_bubblechart() {

  $chart = array(
    'id' => 'visualization',
    'type' => 'bubblechart',
  );

  return d3_draw($chart);
}

function bubblechart_test() {
   return t("Hello World\n");
}

function bubblechart_linegraph() {

  $chart = array(
    'id' => 'visualization',
    'type' => 'linegraph',
    'legend' => array(
      'Development',
      'QA',
      'Strategy',
      'Design',
    ),
    'rows' => array(
      array('1st Quarter 2011',10,20,26,35),
      array('2nd Quarter 2011',20,26,27,37),
      array('3rd Quarter 2011',10,50,28,50),
      array('4th Quarter 2011',15,76,49,51),
      array('1st Quarter 2012',20,100,50,52),
    ),
  );

  return d3_draw($chart);
}

function bubblechart_genomics($input_genes) {

	// Genes of interest
    //var_dump($input_genes);
	if (empty($input_genes)) {
		$gene_list = array('RHEB');
	} else {
		$gene_list = explode(",", $input_genes);
	}

    // Create a Mongo connection and connect to database //echo $db;
    $mongo = new MongoClient("mongodb://localhost");
    $db = $mongo->cats;

    // Select the expression collection for gene expression info
    $coll = $db->expression;


    //$query = array(array('GeneSymbol' => 'RHEB'), array('FileName' => 1, 'GeneSymbol' => 1, 'logFC' => 1, 'PValue' => 1, 'adjPVal' => 1, 'B' => 1)); // SELECT title FROM fields_current WHERE group_name = 'node' AND type = 'content-type'

    // Build query and run it

    // Filter on genes only
    //$query = array("GeneSymbol" => array('$in' => $gene_list));

    // Filter on genes and p-value
    $query = array( '$and' => array( array("GeneSymbol" => array('$in' => $gene_list)), array('PValue' => array('$lt' => .05) ) ) );
    $cursor = $coll->find($query);
    $cursor->timeout(-1);
    //$total = (string)$cursor->count(); //To find total number of documents
    //$cursor->limit( 5 );

    // Access query results
    $result = array();
    $filenames = array();
    $i = 0;

    foreach ($cursor as $doc) {
      //var_dump($doc);
    $result[$i]['FileName'] = $doc['FileName'];
    $result[$i]['name'] = $doc['GeneSymbol'];
    $result[$i]['LogFC'] = $doc['logFC'];
    $result[$i]['PValue'] = $doc['PValue'];
    $result[$i]['AdjPVal'] = $doc['adjPVal'];
    $result[$i]['size'] = abs($doc['logFC']);
    $filenames[] = $doc['FileName'];
    $i++;
    }


		// Check the main for the meta data: Study,parent,DataType,Contrast
    $coll2 = $db->main;
    $query2 = array('FileName' => array('$in' => $filenames));
    $cursor2 = $coll2->find($query2);
    $main_result =  array();
    $i = 0;
    foreach ($cursor2 as $doc) {
      $main_result[$i]['FileName'] = $doc['FileName'];
      $main_result[$i]['Study'] = $doc['StudyName'];
      $main_result[$i]['parent'] = $doc['BrainRegionFull'];
      $main_result[$i]['DataType'] = $doc['DataType'];
      $main_result[$i]['Contrast'] = $doc['Contrast'];
      $i++;
    }
	  //var_dump($main_result);

	  // Incorportate main metadata into result array.
	  $row = array();
   	foreach($result as &$value){
    	$file = $value['FileName'];
    	// Server uses php 5.3.3, which does not have array_column
    	// alternate code suggests: array_map
    	//$main_key = array_search($file, array_column($main_result, 'FileName'));
    	$main_key = array_search($file, array_map(function($element){return $element['FileName'];}, $main_result));
		  $value['Study'] = $main_result[$main_key]['Study'];
		  $value['parent'] = $main_result[$main_key]['parent'];
		  $value['DataType'] = $main_result[$main_key]['DataType'];
		  $value['Contrast'] = $main_result[$main_key]['Contrast'];
		  $row[] = array($value['Study'], $value['parent'], $value['DataType'], $value['Contrast'], $value['name'], $value['LogFC'], $value['size'], $value['PValue'], $value['AdjPVal']);
	  }

    //$terms = array_column($result, 'parent');
    $terms = array_map(function($element){return $element['parent'];}, $result);
    $terms_unique = array_flip($terms);
    //var_dump($terms_unique);

    //$vid = 21;
    $parents = array();
    foreach ($terms_unique as $key => $value) {
      $term_object = taxonomy_get_term_by_name($key);
      $tid = array_pop($term_object)->tid;
      $parent_object = taxonomy_get_parents($tid);
      if (empty($parent_object)){
        $parents[] = $key;
      } else {
        $parent_name = array_pop($parent_object)->name;
        $result[] = array('size' => 5, 'parent' => $parent_name, 'name' => $key);
        $parents[] = $parent_name;
      }
    }
    $parents_unique = array_flip($parents);
    //var_dump($parents_unique);
    foreach($parents_unique as $key => $value){
      $result[] = array('size' => 5, 'parent' => 'WB', 'name' => $key);
    }
    $result[] = array('size' => 5, 'parent' => 'null', 'name' => 'WB');

    //$file_name = 'Test_input.txt';
    //$lines = array_values($result);
    //$file_lines = implode("\n", $lines);
    //file_save_data($file_lines, 'public://' . $file_name);
    //var_dump($result);
    //dsm($result);

    //error-checking:
    //db.expression.find( { GeneSymbol: { $in: [ "RHEB", "SKA1" ]} }, { FileName: 1, GeneSymbol: 1, logFC:1, PValue:1, adjPVal:1, B:1 } ).limit( 5 );

    $chart = array(
      'id' => 'visualization',
      'type' => 'bubblechart',
      'rows' => $result,
    );

    return d3_draw($chart);
}


/**
 * Return a form used to input gene names into bubblechar
 *
 * @return
 *   An array which will be used by the form builder to build the import form
 */

function bubblechart_form($form, &$form_state) {
  $form['input_genes'] = array (
    '#type' => 'textarea',
    '#title' => t('Gene Symbols'),
    '#default_value' => '',
    '#description' => t('Paste a comma separated list of gene symbols'),
    '#size' => 60
  );

  $form['submit'] = array(
    '#type' => 'submit',
    '#value' => t('Submit'),
  );

	return $form;
}

/**
 * Implementation of hook_validate() for the bubblechart_input.
 */

function bubblechart_form_validate($form, & $form_state) {
	 $valid_genes = $form_state['values']['input_genes'];

}

function bubblechart_form_submit($form, & $form_state) {
	$valid_genes = $form_state['values']['input_genes'];

	drupal_set_message(t('Your genes are %genes.', array('%genes' => $valid_genes)));
	//return drupal_render(drupal_get_form('bubblechart_form'));

	$form_state['redirect'] = 'genomics/' . $valid_genes;
}


?>
