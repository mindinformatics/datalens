<?php
/**
 * @file
 * Module file for LocusZoom Services.
 * Contains the resource declarations for the service APIs
 * and other commons functions/hooks. if necessary
 */

/**
 * Implements hook_services_resources().
 * Create service resource for APIs to return the necessary json data.
 */
function lzoom_services_services_resources() {
  $resources = array();

//Include the necessary inc files.
  module_load_include('inc', 'lzoom_services', 'includes/lzoom_services.services');

//Service Apis for contents.
  $resources += lzoom_services_resource();

  return $resources;
}

/**
 * [housing_schemes_services_resource_retrieve] definition.
 * Returns the information about a housing scheme.
 * @param $nid
 *   The nid of the housing_scheme node.
 * @return array
 *	The node processed information array.
 */
function lzoom_services_resource_retrieve($filter) {


// $full_url = "https://portaldev.sph.umich.edu/api/v1/statistic/single/results/?filter=" .  rawurlencode(utf8_encode(($filter)));
//
//  	$my_test = drupal_http_request($full_url);
// 	$data = drupal_json_decode($my_test->data);

//return $data;

//http://localhost:8888/assoc/lzoom/analysis%20in%201%20and%20chromosome%20in%2019%20and%20position%20ge%2044910831%20and%20position%20le%2045910831.json
  $analysis = preg_replace('/analysis in (\d+) +.*/', '$1', $filter);
  $chr      = preg_replace('/.*chromosome in (\d+) +.*/', '$1', $filter);
  $start    = preg_replace('/.*position ge (\d+) +.*/', '$1', $filter);
  $end      = preg_replace('/.*position le (\d+)/', '$1', $filter);

	// return array('filter_string' => $filter,
// 							'analysis' => $analysis,
// 							'chr' => $chr,
// 							'start' => $start,
// 							'end' => $end,
// 							);

  $data = _query_mongo_lzoom($chr, $start, $end, $analysis);
  return array('data' => $data, 'lastPage' => null);
}

function _query_mongo_lzoom($chr, $start, $end, $analysis) {

    $start = intval($start);
    $end = intval($end);
    $chr = intval($chr);

    // Add MayoEGWAS_analysis_eQTL_TCX_imputedResults_AD.csv
    $study_list = array('1' => 'IGAP_stage_1.tsv',
                        '2' => 'AMP-AD.tsv',
                        '3' => 'MayoEGWAS_analysis_eQTL_TCX_imputedResults_AD.csv');

    $study_file = $study_list[$analysis];

    // Create a Mongo connection and connect to database //echo $db;
    $mongo = new MongoClient("mongodb://localhost");
    $db = $mongo->cats;

    // Select the genomic variation collection for genetic variation info
    $coll = $db->genetic_association;

    // Filter on position and chromosome
    $query = array('$and' =>
               array(
               array('chr' => $chr),
               array('pos' => array('$lt' => $end, '$gt' => $start) ),
               array('FileName' => $study_file)
               )
             );

    //dsm($query);

    $cursor = $coll->find($query);
    $cursor->timeout(-1);
    $cursor->sort(array('Pvalue' => 1));
    $cursor->limit( 500 );

     //Access query results
     $result = array();
     $filenames = array();
     $i = 0;

     foreach ($cursor as $doc) {
       //var_dump($doc);
       //analysis, variant, chr, position, refAlleleFreq, ref_allele, pvalue, log_pvalue, scoreTestStat (null)
       $result['analysis'][$i] = intval($analysis);
       //The last allele should be the reference allele- need to check with nate?
       $result['variant'][$i] = $doc['chr'] . ":" . $doc['pos'] . "_" . $doc['Allele2'] . "/" . $doc['Allele1'];
       $result['chr'][$i] = $doc['chr'];
       $result['position'][$i] = $doc['pos'];
       $result['refAlleleFreq'][$i] = null;
       $result['ref_allele'][$i] = $doc['Allele1'];
       $result['pvalue'][$i] = $doc['Pvalue'];
       $result['log_pvalue'][$i] = $doc['logPvalue'];
       $result['scoreTestStat'][$i] = null;

       //$result[$i]['MarkerName'] = $doc['MarkerName'];
       //$result[$i]['NearestGene'] = !empty($doc['HGNC']) ? $doc['HGNC'] : "";
       $i++;
     }

     return $result;
}


?>
