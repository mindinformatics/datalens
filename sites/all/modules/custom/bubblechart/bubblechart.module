<?php

// Show PHP errors (during development only)
    //error_reporting(E_ALL | E_STRICT);
    //ini_set("display_errors", 2);

/**
 * Implements hook_block_info().
 *
 * This hook declares what blocks are provided by the module.
 */
function bubblechart_block_info() {
  $blocks = array();
  $blocks['bubble_block'] = array(
    // info: The name of the block.
    'info' => t('Bubble Chart Block: D3 Viz'),
  );
  return $blocks;
}


/**
 * Implements hook_block_view().
 *
 * This hook generates the contents of the blocks
 */
function bubblechart_block_view($delta = '') {
  //The $delta parameter tells us which block is being requested.
  switch ($delta) {
    case 'bubble_block':
      $path = libraries_get_path('d3.bubblechart');
      drupal_add_js($path . '/libs/' . 'd3.slider.js');
      drupal_add_js($path . '/libs/' . 'bootstrap.js');
      drupal_add_css($path . '/libs/' . 'bootstrap.css');
      drupal_add_css($path . '/libs/' . 'bubblechart.css');
      //drupal_add_js($path . '/libs/' . 'jquery-2.1.4.min.js');
      //drupal_add_js($path . '/libs/' . 'd3.min.js');
      //drupal_add_js($path . '/bubblechart.js');
      $block['subject'] = t("Bubble Chart Block");
      $block['content'] =  t('<p>PValue</p><div id="sliderPVal"></div>');
      $block['content'] .=  t('<p>FCValue</p><div id="sliderFCVal"></div>');
      $block['content'] .=  t('<div id="visualization"></div>');
      $block['content'] .= bubblechart_bubblechart();
      break;
  }
  return $block;
}

/**
* Implements hook_menu().
*/
function bubblechart_menu() {
  $items['bubbles'] = array(
    'title' => 'D3 visualization',
    'description' => 'Different visualization examples using d3.',
    'page callback' => 'bubblechart_bubblechart',
    'access callback' => TRUE,
  );
  $items['genomics/%'] = array(
    'title' => 'Expression Data Bubblechart',
    'description' => 'Return expression data',
    'page callback' => 'bubblechart_genomics',
    'page arguments' => array(2),
    'access callback' => TRUE,
  );
  $items['input'] = array(
    'title' => 'Gene Symbols input',
    'description' => 'Input genes to return expression data',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('bubblechart_form'),
    'access callback' => TRUE,
    'type' => MENU_NORMAL_ITEM,
  );

  return $items;
}

function bubblechart_bubblechart() {

  $chart = array(
    'id' => 'visualization',
    'type' => 'bubblechart',
  );

  return d3_draw($chart);
}

function bubblechart_test() {
   return t("Hello World\n");
}

function bubblechart_linegraph() {

  $chart = array(
    'id' => 'visualization',
    'type' => 'linegraph',
    'legend' => array(
      'Development',
      'QA',
      'Strategy',
      'Design',
    ),
    'rows' => array(
      array('1st Quarter 2011',10,20,26,35),
      array('2nd Quarter 2011',20,26,27,37),
      array('3rd Quarter 2011',10,50,28,50),
      array('4th Quarter 2011',15,76,49,51),
      array('1st Quarter 2012',20,100,50,52),
    ),
  );

  return d3_draw($chart);
}

function bubblechart_genomics($input_genes) {

		//Enter genes of interest

		if (empty($input_genes)) {
			$gene_list = array('RHEB','SKA1');
		} else {
			$gene_list = explode(",", $input_genes);
		}

    // Create a Mongo connection and connect to database //echo $db;
    $mongo = new MongoClient("mongodb://localhost");
    $db = $mongo->cats;


    // Select the expression collection for gene expression info
    //name,LogFC,size,PValue,AdjPValue
    $coll = $db->expression;


    //$query = array(array('GeneSymbol' => 'RHEB'), array('FileName' => 1, 'GeneSymbol' => 1, 'logFC' => 1, 'PValue' => 1, 'adjPVal' => 1, 'B' => 1)); // SELECT title FROM fields_current WHERE group_name = 'node' AND type = 'content-type'

    //Build query and run it
    $query = array("GeneSymbol" => array('$in' => $gene_list));
		$cursor = $coll->find($query);
		$cursor->timeout(-1);
		//$total = (string)$cursor->count(); //To find total number of documents
		//$cursor->limit( 5 );

		//Access query results
		$result = array();
		$filenames = array();
		$i = 0;

		foreach ($cursor as $doc) {
			//var_dump($doc);
			$result[$i]['FileName'] = $doc['FileName'];
			$result[$i]['name'] = $doc['GeneSymbol'];
			$result[$i]['LogFC'] = $doc['logFC'];
			$result[$i]['PValue'] = $doc['PValue'];
			$result[$i]['AdjPVal'] = $doc['adjPVal'];
			$result[$i]['size'] = abs($doc['logFC']);
			$filenames[] = $doc['FileName'];
			$i++;
		}


		// Check the main for the meta data: Study,parent,DataType,Contrast
    $coll2 = $db->main;
    $query2 = array('FileName' => array('$in' => $filenames));
		$cursor2 = $coll2->find($query2);
		$main_result =  array();
		$i = 0;
		foreach ($cursor2 as $doc) {
			$main_result[$i]['FileName'] = $doc['FileName'];
			$main_result[$i]['Study'] = $doc['StudyName'];
			$main_result[$i]['parent'] = $doc['BrainRegionFull'];
			$main_result[$i]['DataType'] = $doc['DataType'];
			$main_result[$i]['Contrast'] = $doc['Contrast'];
			$i++;
		}
		//var_dump($main_result);

		// Incorportate main metadata into result array.
		$row = array();
   	foreach($result as &$value){
    	$file = $value['FileName'];
    	$main_key = array_search($file, array_column($main_result, 'FileName'));
			$value['Study'] = $main_result[$main_key]['Study'];
			$value['parent'] = $main_result[$main_key]['parent'];
			$value['DataType'] = $main_result[$main_key]['DataType'];
			$value['Contrast'] = $main_result[$main_key]['Contrast'];
			$row[] = array($value['Study'], $value['parent'], $value['DataType'], $value['Contrast'], $value['name'], $value['LogFC'], abs($value['LogFC']), $value['PValue'], $value['AdjPVal']);
		}

		$terms = array_column($result, 'parent');
		$terms_unique = array_flip($terms);
		//var_dump($terms_unique);

		//$vid = 21;
		$parents = array();
		foreach ($terms_unique as $key => $value) {
			$term_object = taxonomy_get_term_by_name($key);
			$tid = array_pop($term_object)->tid;
			$parent_object = taxonomy_get_parents($tid);
			if (empty($parent_object)){
				$parents[] = $key;
			} else {
				$parent_name = array_pop($parent_object)->name;
				$result[] = array('size' => 5, 'parent' => $parent_name, 'name' => $key);
				$parents[] = $parent_name;
			}

		}
		$parents_unique = array_flip($parents);
		//var_dump($parents_unique);
		foreach($parents_unique as $key => $value){
			$result[] = array('size' => 5, 'parent' => 'WB', 'name' => $key);
		}
		$result[] = array('size' => 5, 'parent' => 'null', 'name' => 'WB');

		//var_dump($result);
		//dsm($result);

		//error-checking:
		//db.expression.find( { GeneSymbol: { $in: [ "RHEB", "SKA1" ]} }, { FileName: 1, GeneSymbol: 1, logFC:1, PValue:1, adjPVal:1, B:1 } ).limit( 5 );

		$chart = array(
    	'id' => 'visualization',
    	'type' => 'bubblechart',
    	'rows' => $result,
  	);

	return d3_draw($chart);
}


/**
 * Return a form used to input gene names into bubblechar
 *
 * @return
 *   An array which will be used by the form builder to build the import form
 */

function bubblechart_form($form, &$form_state) {
	$form['input_genes'] = array (
    '#type' => 'textarea',
    '#title' => t('Gene Symbols'),
    '#default_value' => '',
    '#description' => t('Paste a comma separated list of gene symbols'),
    '#size' => 60
  );

  $form['submit'] = array(
    '#type' => 'submit',
    '#value' => t('Submit'),
  );

	return $form;
}

/**
 * Implementation of hook_validate() for the bubblechart_input.
 */

function bubblechart_form_validate($form, & $form_state) {
	 $valid_genes = $form_state['values']['input_genes'];



}

function bubblechart_form_submit($form, & $form_state) {
	$valid_genes = $form_state['values']['input_genes'];

	drupal_set_message(t('Working.... this will take a few minutes. Your genes are %genes', array('%genes' => $valid_genes)));
	//return drupal_render(drupal_get_form('bubblechart_form'));

	$form_state['redirect'] = 'genomics/' . $valid_genes;
}


?>
