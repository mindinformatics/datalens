<?php

// Show PHP errors (during development only)
    //error_reporting(E_ALL | E_STRICT);
    //ini_set("display_errors", 2);

/**
* Implements hook_menu().
*/

function hboxplot_menu() {
  $items['forest-plot'] = array(
    'title' => 'Forest Plot',
    'description' => 'Forest Plot using D3 visualization',
    'page callback' => 'hboxplot_page',
    'access callback' => 'user_is_logged_in',
  );

    $items['compare-studies'] = array(
    'title' => 'Study Comparison',
    'description' => 'Compare studies',
    'page callback' => 'hboxplot_file',
    'access callback' => 'user_is_logged_in',
  );

   $items['test-agora'] = array(
    'title' => 'Check Agora data',
    'description' => 'Compare studies',
    'page callback' => 'hboxplot_file',
    'access callback' => 'user_is_logged_in',
  );

  return $items;
}

function hboxplot_page() {

  $page = "";
  $hplot_form = drupal_get_form('choosegene_form');
  $page .= drupal_render($hplot_form);

  return $page;
}

function hboxplot_file() {

  $page = "";
  $hplot_form2 = drupal_get_form('choosegene_form_file');
  $page .= drupal_render($hplot_form2);

  return $page;
}


/**
 * Implements hook_block_info().
 *
 * This hook declares what blocks are provided by the module.
 */


function hboxplot_block_info() {
  $blocks = array();
  $blocks['hboxplot_block1'] = array(
    // info: The name of the block.
    'info' => t('AD-Normal Microarray'),
  );
  $blocks['hboxplot_block2'] = array(
    // info: The name of the block.
    'info' => t('B3-B1 Microarray'),
  );
  $blocks['hboxplot_block3'] = array(
    // info: The name of the block.
    'info' => t('Legend'),
  );
  $blocks['hboxplot_block4'] = array(
    // info: The name of the block.
    'info' => t('AD-Normal RNA-Seq'),
  );
  $blocks['hboxplot_block5'] = array(
    // info: The name of the block.
    'info' => t('B3-B1 RNA-Seq'),
  );
  $blocks['hboxplot_block6'] = array(
    // info: The name of the block.
    'info' => t('Boxplot Legend Spacer'),
  );

  return $blocks;
}

function hboxplot_block_view($delta = '') {
  //The $delta parameter tells us which block is being requested.
  $block = array();
  $gene=$form_state['values']['input_gene'];

  switch ($delta) {
    case 'hboxplot_block1':
      if (user_is_logged_in()) {
      	$block['subject'] = t("AD-NCI Microarray");
		    $data_rows = hboxplot_query_mongo("DCLK1", array("uArray"), "AD-NCI", "CpDxAll");
		    //dsm($data_rows);
		    $block['content'] = $gene;
		    $block['content'] .= hboxplot_block('vis1', $data_rows);
		    //$block['content'] = hboxplot_block('vis1', 'CD33.csv');
	  }
		break;
    case 'hboxplot_block2':
      if (user_is_logged_in()) {
		  $block['subject'] = t("B3-B1 Microarray");
		  $data_rows = hboxplot_query_mongo("DCLK1", array("uArray"), "B3-B1", "Braak");
		  $block['content'] = hboxplot_block('vis2',$data_rows);
		  //$block['content'] = hboxplot_block('vis2', 'CD33-Braak.csv');
      }
      break;
    case 'hboxplot_block3':
      if (user_is_logged_in()) {
		  $block['subject'] = t("Legend");
		  $block['content'] = "<img src='/sites/all/themes/scf_theme/HBoxplot/Legend.png' style='width:100%;'/>";
      }
      break;
    case 'hboxplot_block4':
      if (user_is_logged_in()) {
		  $block['subject'] = t("AD-NCI RNA-Seq");
		  $data_rows = hboxplot_query_mongo("CD33", array("RC","FPKM"), "AD-NCI", "CpDxAll");
		  $block['content'] = hboxplot_block('vis4', $data_rows);
		  //$block['content'] = hboxplot_block('vis4', 'CD33-RNASeq.csv');
      }
      break;
    case 'hboxplot_block5':
      if (user_is_logged_in()) {
		  $block['subject'] = t("B3-B1 RNA-Seq");
		  $data_rows = hboxplot_query_mongo("CD33", array("RC","FPKM"), "B3-B1", "Braak");
		  $block['content'] = hboxplot_block('vis5', $data_rows);
		  //$block['content'] = hboxplot_block('vis5', 'CD33-RNASeq-B3-B1.csv');
      }
      break;
    case 'hboxplot_block6':
      if (user_is_logged_in()) {
		  $block['subject'] = t("");
		  $block['content'] = "";
      }
      break;
  }
  return $block;
}

function hboxplot_block($id, $rows, $category, $chart_size) {
  $path = libraries_get_path('d3.hboxplot');
  libraries_load('d3.hboxplot');

  $chart = array(
    'id' => $id,
    'type' => 'hboxplot',
    'category' => $category,
    'chart_size' => $chart_size,
    'rows' => $rows,
  );

  return d3_draw($chart);
}

function choosegene_form($form, &$form_state) {

  $form['input_gene'] = array (
    '#type' => 'textfield',
    '#title' => t('Gene Symbol'),
    '#default_value' => '',
    '#description' => t('Please enter a gene symbol'),
    '#size' => 20,
  );


  $form['submit'] = array(
    '#prefix' => '<div class="hplot-inline">',
    '#suffix' => '</div>',
    '#type' => 'submit',
    '#value' => t('Go'),
    '#ajax' => array(
      'callback' => 'ajax_hplot_callback',
      'wrapper'  => 'hplots',
      'effect'   => 'fade',
     ),
  );

  $category = "BrainRegion";
  $chart_size = "multi";

  // Define default plot for CD33
	$data_rows = hboxplot_query_mongo("CD33", array("uArray"), "AD-NCI", "CpDxAll");
	$content1 = "<span id='htitle'>AD-NCI Microarray</span>" .  hboxplot_block('vis1', $data_rows, $category, $chart_size);
	$data_rows = hboxplot_query_mongo("CD33", array("uArray"), "B3-B1", "Braak");
	$content2 = "<span id='htitle'>B3-B1 Microarray</span>" . hboxplot_block('vis2',$data_rows, $category, $chart_size);
	$content3 = "<img src='/sites/all/themes/scf_theme/HBoxplot/Legend2.png' style='width:100%;'/>";
	$data_rows = hboxplot_query_mongo("CD33", array("CPM","FPKM"), "AD-NCI", "CpDxAll");
	$content4 = "<span id='htitle'>AD-NCI RNA-Seq</span>" . hboxplot_block('vis4', $data_rows, $category, $chart_size);
	$data_rows = hboxplot_query_mongo("CD33", array("CPM","FPKM"), "B3-B1", "Braak");
	$content5 = "<span id='htitle'>B3-B1 RNA-Seq</span>" . hboxplot_block('vis5', $data_rows, $category, $chart_size);
  $content6  = "";


  $content = '<div id="hplots">';
  $content .= "<span id='gtitle'>" . "CD33" . "</span>";
  $content .= '<table id="forest-plot">';
  $content .= '<tr><td>';
  $content .= $content4;
  $content .= '</td><td>';
  $content .= $content5;
  $content .= '</td><td>';
  $content .= $content6;
  $content .= '</td></tr><tr><td>';
  $content .= $content1;
  $content .= '</td><td>';
  $content .= $content2;
  $content .= '</td><td>';
  $content .= $content3;
  $content .= '</td></tr>';
  $content .= '</table>';
  $content .= '</div>';

  $form['wrapper'] = array(
    '#markup' => '<div id="hplots">' . $content . '</div>',
  );


	return $form;
}

function choosegene_form_file($form, &$form_state) {

  $form['input_gene'] = array (
    '#type' => 'textfield',
    '#title' => t('Gene Symbol'),
    '#default_value' => '',
    '#description' => t('Please enter a gene symbol'),
    '#size' => 20,
  );


  $form['submit'] = array(
    '#prefix' => '<div class="hplot-inline">',
    '#suffix' => '</div>',
    '#type' => 'submit',
    '#value' => t('Go'),
    '#ajax' => array(
      'callback' => 'ajax_hplot_callback_file',
      'wrapper'  => 'hplots2',
      'effect'   => 'fade',
     ),
  );


  $data_files = array(
    "MSBB_HIPP_Braak_B3-B1.csv",
    "MSBB_HIPP_CDR_AD-NCI.csv",
    "MSBB_HIPP_CERAD_C3-C0.csv",
    "MSBB_HIPP_CpDxAll_AD-NCI.csv",
    "MSBB_HIPP_CpDxLow_AD-NCI.csv",
    "ROSMAP_PFC_Braak_B3-B1.csv",
    "ROSMAP_PFC_CERAD_C3-C0.csv",
    "ROSMAP_PFC_ClinicalDiagnosis_AD-NCI.csv",
    "ROSMAP_PFC_CpDxAll_AD-NCI.csv",
    "ROSMAP_PFC_CpDxLow_AD-NCI.csv",
    "ROSMAP_PFC_CpDxStrict_AD-NCI.csv",
    "ROSMAP_PFC_MMSE_AD-NCI.csv",
    "MayoBB_CBE_CPM_ClinicalDiagnosis_AD-NCI.csv",
    "MayoBB_TCX_CPM_ClinicalDiagnosis_AD-NCI.csv",
    "MSBB_PHG_CPM_Braak_B3-B1.csv",
    "MSBB_PHG_CPM_CDR_AD-NCI.csv",
    "MSBB_PHG_CPM_CERAD_C3-C0.csv",
    "MSBB_PHG_CPM_CpDxAll_AD-NCI.csv",
    "MSBB_PHG_CPM_CpDxLow_AD-NCI.csv",
    "MSBB_PHG_CPM_CpDxStrict_AD-NCI.csv",
    "ROSMAP_PFC_FPKM_Braak_B3-B1.csv",
    "ROSMAP_PFC_FPKM_CERAD_C3-C0.csv",
    "ROSMAP_PFC_FPKM_ClinicalDiagnosis_AD-NCI.csv",
    "ROSMAP_PFC_FPKM_CpDxAll_AD-NCI.csv",
    "ROSMAP_PFC_FPKM_CpDxLow_AD-NCI.csv",
    "ROSMAP_PFC_FPKM_CpDxStrict_AD-NCI.csv",
    "ROSMAP_PFC_FPKM_MMSE_AD-NCI.csv"
  );

  $category = "FileName";
  $chart_size = "single";

	$data_rows = hboxplot_query_mongo_file("CD33", $data_files);
	$content1 = "<span id='htitle'>CD33</span>" .  hboxplot_block('vis1', $data_rows, $category, $chart_size);

  $content = '<div id="hplots2">';
  $content .= "<span id='gtitle'></span>";
  $content .= $content1;
  $content .= '</div>';

  $form['wrapper'] = array(
    '#markup' => '<div id="hplots2">' . $content . '</div>',
  );


	return $form;
}

function ajax_hplot_callback($form, $form_state) {

  $gene= $form_state['values']['input_gene'];
  $category = "BrainRegion";
  $chart_size = "multi";

  $data_rows = hboxplot_query_mongo($gene, array("uArray"), "AD-NCI", "CpDxAll");
	$content1 = "<span id='htitle'>AD-NCI Microarray</span>" .  hboxplot_block('vis1', $data_rows, $category, $chart_size);
	$data_rows = hboxplot_query_mongo($gene, array("uArray"), "B3-B1", "Braak");
	$content2 = "<span id='htitle'>B3-B1 Microarray</span>" . hboxplot_block('vis2',$data_rows, $category, $chart_size);
	$content3 = "<img src='/sites/all/themes/scf_theme/HBoxplot/Legend2.png' style='width:100%;'/>";
	$data_rows = hboxplot_query_mongo($gene, array("CPM","FPKM"), "AD-NCI", "CpDxAll");
	$content4 = "<span id='htitle'>AD-NCI RNA-Seq</span>" . hboxplot_block('vis4', $data_rows, $category, $chart_size);
	$data_rows = hboxplot_query_mongo($gene, array("CPM","FPKM"), "B3-B1", "Braak");
	$content5 = "<span id='htitle'>B3-B1 RNA-Seq</span>" . hboxplot_block('vis5', $data_rows, $category, $chart_size);
  $content6  = "";


  $content = '<div id="hplots">';
  $content .= "<span id='gtitle'>" . $gene . "</span>";
  $content .= '<table id="forest-plot">';
  $content .= '<tr><td>';
  $content .= $content4;
  $content .= '</td><td>';
  $content .= $content5;
  $content .= '</td><td>';
  $content .= $content3;
  $content .= '</td></tr><tr><td>';
  $content .= $content1;
  $content .= '</td><td>';
  $content .= $content2;
  $content .= '</td><td>';
  $content .= $content6;
  $content .= '</td></tr>';
  $content .= '</table>';
  $content .= '</div>';

  return $content;

}

function ajax_hplot_callback_file($form, $form_state) {

  $gene = $form_state['values']['input_gene'];
  $category = "FileName";
  $chart_size = "single";

  $data_files = array(
    "MSBB_HIPP_Braak_B3-B1.csv",
    "MSBB_HIPP_CDR_AD-NCI.csv",
    "MSBB_HIPP_CERAD_C3-C0.csv",
    "MSBB_HIPP_CpDxAll_AD-NCI.csv",
    "MSBB_HIPP_CpDxLow_AD-NCI.csv",
    "ROSMAP_PFC_Braak_B3-B1.csv",
    "ROSMAP_PFC_CERAD_C3-C0.csv",
    "ROSMAP_PFC_ClinicalDiagnosis_AD-NCI.csv",
    "ROSMAP_PFC_CpDxAll_AD-NCI.csv",
    "ROSMAP_PFC_CpDxLow_AD-NCI.csv",
    "ROSMAP_PFC_CpDxStrict_AD-NCI.csv",
    "ROSMAP_PFC_MMSE_AD-NCI.csv",
    "MayoBB_CBE_CPM_ClinicalDiagnosis_AD-NCI.csv",
    "MayoBB_TCX_CPM_ClinicalDiagnosis_AD-NCI.csv",
    "MSBB_PHG_CPM_Braak_B3-B1.csv",
    "MSBB_PHG_CPM_CDR_AD-NCI.csv",
    "MSBB_PHG_CPM_CERAD_C3-C0.csv",
    "MSBB_PHG_CPM_CpDxAll_AD-NCI.csv",
    "MSBB_PHG_CPM_CpDxLow_AD-NCI.csv",
    "MSBB_PHG_CPM_CpDxStrict_AD-NCI.csv",
    "ROSMAP_PFC_FPKM_Braak_B3-B1.csv",
    "ROSMAP_PFC_FPKM_CERAD_C3-C0.csv",
    "ROSMAP_PFC_FPKM_ClinicalDiagnosis_AD-NCI.csv",
    "ROSMAP_PFC_FPKM_CpDxAll_AD-NCI.csv",
    "ROSMAP_PFC_FPKM_CpDxLow_AD-NCI.csv",
    "ROSMAP_PFC_FPKM_CpDxStrict_AD-NCI.csv",
    "ROSMAP_PFC_FPKM_MMSE_AD-NCI.csv"
  );

  $data_rows = hboxplot_query_mongo_file($gene, $data_files);
  usort($data_rows, '_compare_filenames');
	$content1 = "<span id='htitle'>" . $gene . "</span>" .  hboxplot_block('vis1', $data_rows, $category, $chart_size);

  $content = '<div id="hplots2">';
  $content .= "<span id='gtitle'></span>";
  $content .= $content1;
  $content .= '</div>';


  return $content;

}

function hboxplot_query_mongo($input_gene, $data_type, $contrast, $strat_factor) {


    if (empty($input_gene)) {
      $gene_list = array('PRELP');
    } else {
      $input_gene = strtoupper($input_gene);
      //Explode whitespace (tabs, new lines, spaces) and commas; old: $gene_list = explode(",", $input_genes);
      $gene_list = preg_split('/[\s ,]+/', $input_gene);
      $gene_list = array_filter($gene_list);
      $trimmed_array = array_map('trim', $gene_list);
      $gene_list = $trimmed_array;
      $species = array("human");
      $gene_list = array_map('_query_synonyms', $gene_list, $species);
      //var_dump($gene_list);

    }


    // Create a Mongo connection and connect to database //echo $db;
    $mongo = new MongoClient("mongodb://localhost");
    $db = $mongo->cats;

    // Select the expression collection for gene expression info
    $coll = $db->human_expression;

    // Filter on gene
    //db.human_expression.find({"GeneSymbol":"CD33","Contrast":"AD-NCI","StratFactor":"CpDxAll"}).count()
    //$query = array("GeneSymbol" => array('$in' => $gene_list));
    $query = array( '$and' => array( array("GeneSymbol" => array('$in' => $gene_list)),
             array('DataType' => array('$in' => $data_type)),
             array('Contrast' => $contrast),
             array('StratFactor' => $strat_factor),
             ) );

    //dsm($query);

    $cursor = $coll->find($query);
    $cursor->timeout(-1);
    $cursor->sort(array('Rank' => 1));
    $cursor->limit( 500 );
    //$total = (string)$cursor->count(); //To find total number of documents
    //dsm($total);
    //$cursor->limit( 5 );

     //Access query results
     $result = array();
     $filenames = array();
     $i = 0;

     //Study,BrainRegion,Technology,logFC,CIL,CIR,PValue,median,min,max,Rank,row
     foreach ($cursor as $doc) {
       //var_dump($doc);
       $result[$i]['Study'] = $doc['StudyName'];
       $result[$i]['BrainRegion'] = $doc['BrainRegionCode'];
       $result[$i]['Technology'] = $doc['DataType'];
       $result[$i]['FileName'] = $doc['FileName'];
       $result[$i]['ProbeID'] = !empty($doc['ProbeID']) ? $doc['ProbeID'] : "";
       $result[$i]['logFC'] = $doc['logFC'];
       $result[$i]['CIL'] = $doc['CIL'];
       $result[$i]['CIR'] = $doc['CIR'];
       $result[$i]['PValue'] = $doc['PValue'];
       $result[$i]['median'] = $doc['median'];
       $result[$i]['min'] = $doc['min'];
       $result[$i]['max'] = $doc['max'];
       $result[$i]['Rank'] = $doc['Rank'];
       $filenames[] = $doc['FileName'];
       $i++;
     }

  //Some genes have multiple probes; these will appear in the same file.
   if ($data_type[0] == "uArray" ) {
      //var_dump("All Filenames");
      //var_dump($filenames);
      $dup_files =  _array_dup($filenames);
      //var_dump("Duplicate Files");
      //var_dump($dup_files);



      foreach ($dup_files as $dup) {
        $abs_logfc = array();
        $array_id = array();
        $probe_id = array();
        //find it


        //probes = result['Filename'] == $dup
        //find max probe
        //unset everyting that is not the max

        foreach ($result as $key => $value ) {
          if ($value['FileName'] == $dup) {
            $array_id[] = $key;
            $abs_logfc[] = abs($value['logFC']);
            $probe_id[] = $value['ProbeID'];
            //dsm($array_id);
          }
        }

        $max_val = max($abs_logfc);
        $index = array_search(max($abs_logfc),$abs_logfc);

        //dsm($array_id);
        //dsm("Max abs logFC");
        //dsm($max_val);
        //dsm("Index of max");
        //dsm($index);

        foreach($array_id as $key=>$value) {
          if ($key != $index) {
            unset($result[$value]);
          }
        }

      }
   }



  //dsm($result);

  return $result;

}

function hboxplot_query_mongo_file($input_gene, $file_list) {

    if (empty($input_gene)) {
      $gene_list = array('PRELP');
    } else {
      $input_gene = strtoupper($input_gene);
      //Explode whitespace (tabs, new lines, spaces) and commas; old: $gene_list = explode(",", $input_genes);
      $gene_list = preg_split('/[\s ,]+/', $input_gene);
      $gene_list = array_filter($gene_list);
      $trimmed_array = array_map('trim', $gene_list);
      $gene_list = $trimmed_array;
      $species = array("human");
      $gene_list = array_map('_query_synonyms', $gene_list, $species);
      //var_dump($gene_list);

    }


    // Create a Mongo connection and connect to database //echo $db;
    $mongo = new MongoClient("mongodb://localhost");
    $db = $mongo->cats;

    // Select the expression collection for gene expression info
    $coll = $db->human_expression;

    // Filter on gene
    //db.human_expression.find({"GeneSymbol":"CD33","Contrast":"AD-NCI","StratFactor":"CpDxAll"}).count()
    //$query = array("GeneSymbol" => array('$in' => $gene_list));
    $query = array( '$and' => array( array("GeneSymbol" => array('$in' => $gene_list)),
             array('FileName' => array('$in' => $file_list),
             ) ) );

    //dsm($query);

    $cursor = $coll->find($query);
    $cursor->timeout(-1);
    $cursor->sort(array('Rank' => 1));
    $cursor->limit( 500 );
    //$total = (string)$cursor->count(); //To find total number of documents
    //dsm($total);
    //$cursor->limit( 5 );

     //Access query results
     $result = array();
     $filenames = array();
     $i = 0;

     //Study,BrainRegion,Technology,logFC,CIL,CIR,PValue,median,min,max,Rank,row
     foreach ($cursor as $doc) {
       //var_dump($doc);
       $result[$i]['Study'] = $doc['StudyName'];
       $result[$i]['GeneSymbol'] = $doc['GeneSymbol'];
       $result[$i]['BrainRegion'] = $doc['BrainRegionCode'];
       $result[$i]['Technology'] = $doc['DataType'];
       $result[$i]['FileName'] = $doc['FileName'];
       $result[$i]['ProbeID'] = !empty($doc['ProbeID']) ? $doc['ProbeID'] : "";
       $result[$i]['logFC'] = $doc['logFC'];
       $result[$i]['FC'] = ($doc['logFC'] >= 0) ? pow(2,$doc['logFC']) : -1/pow(2,$doc['logFC']);
       $result[$i]['CIL'] = $doc['CIL'];
       $result[$i]['CIR'] = $doc['CIR'];
       $result[$i]['PValue'] = $doc['PValue'];
       $result[$i]['median'] = $doc['median'];
       $result[$i]['min'] = $doc['min'];
       $result[$i]['max'] = $doc['max'];
       $result[$i]['Rank'] = $doc['Rank'];
       $filenames[] = $doc['FileName'];
       $i++;
     }

    $files_result = array_map(function($element){return $element['FileName'];}, $result);

    $unique_files = array_unique($files_result);

  //Some genes have multiple probes; these will appear in the same file.
   if (count($files_result) > count($unique_files)) {
      $dup_files =  _array_dup($filenames);

      foreach ($dup_files as $dup) {
        $abs_logfc = array();
        $array_id = array();
        $probe_id = array();

        //find max probe
        //unset everyting that is not the max
        foreach ($result as $key => $value ) {
          if ($value['FileName'] == $dup) {
            $array_id[] = $key;
            $abs_logfc[] = abs($value['logFC']);
            $probe_id[] = $value['ProbeID'];
            //dsm($array_id);
          }
        }

        $max_val = max($abs_logfc);
        $index = array_search(max($abs_logfc),$abs_logfc);

        foreach($array_id as $key=>$value) {
          if ($key != $index) {
            unset($result[$value]);
          }
        }

      }
   }

  return $result;

}

function _array_dup($ar) {
   return array_unique(array_diff_assoc($ar,array_unique($ar)));
}

function hboxplot_form_alter(&$form, &$form_state,$form_id ){

 if($form['#id'] == 'views-exposed-form-evidence-simple-page') {
    //dsm($form['title']['#type']);
    $form['title']['#type']='textfield';
    $form['title']['#size']='20';
    $form['title']['#description']=t('Please enter a gene symbol');
 }

}

function hboxplot_views_pre_render(&$view) {
    if($view->name=='evidence_simple'){
    //dsm($view);
    //dsm($view->exposed_input);
    //dsm($view->display_handler->get_option('filters'));

    if (empty($view->exposed_input['title']) ) {
        $view->result = array();
        $view->total_rows = 0;
        $view->query->pager->total_items = 0;
        $view->query->pager->update_page_info();
        $view->empty['area']->options['content'] = "Please enter a gene symbol and click the Apply button.";
    } else {

    // Gene
    $gene_list = "";
    if (!empty($view->exposed_input['title'])) {
      $gene_list = $view->exposed_input['title'];
    }


    $file_list = array("ROSMAP_PFC_FPKM_CpDxAll_AD-NCI.csv",
    "MayoBB_TCX_CPM_ClinicalDiagnosis_AD-NCI.csv",
    "MayoBB_CBE_CPM_ClinicalDiagnosis_AD-NCI.csv",
    "MSBB_STG_CPM_CpDxAll_AD-NCI.csv",
    "MSBB_PHG_CPM_CpDxAll_AD-NCI.csv",
    "MSBB_IFG_CPM_CpDxAll_AD-NCI.csv",
    "MSBB_FP_CPM_CpDxAll_AD-NCI.csv");

    $mongo_array = hboxplot_query_mongo_file($gene_list, $file_list);
    $agora_array = hboxplot_query_mongo_agora($gene_list);

    //dsm($mongo_array);
    usort($mongo_array, '_compare_filenames');

    $new_result_array = array();
    foreach($mongo_array as $row) {
       //$row[] = array($value['Study'], $value['BrainRegion'], $value['DataType'], $value['Contrast'], $value['GeneSymbol'], $value['LogFC'], $value['PValue'], $value['AdjPVal'], $value['FileName']););
      $analysis_nid = intval(_query_analysisId($row['FileName']));
      $input_study_nid = intval(_query_inputId($analysis_nid));
      //var_dump($analysis_id);
      $temp = new stdClass;
      //$temp->node_title = $row['GeneSymbol'] . " " . $row['ProbeID'];
      $temp->node_title = $row['GeneSymbol'];
      //$temp->field_field_probe_id[0]['rendered']['#markup'] = $row['ProbeID'];
      $temp->field_field_pvalue[0]['raw']['value'] = $row['PValue'];
      $temp->field_field_pvalue[0]['rendered']['#markup'] = sprintf('%.2E', $row['PValue']);
      $temp->field_field_fold_change[0]['raw']['value'] = $row['logFC'];
      $temp->field_field_fold_change[0]['rendered']['#markup'] = $row['logFC'];
      //$temp->field_field_fold_change_raw[0]['raw']['value'] = $row['FC'];
      // $temp->field_field_fold_change_raw[0]['rendered']['#markup'] = sprintf('%.2f', $row['FC']);
      $temp->field_field_result_data[0]['raw']['target_id'] = _query_analysisId($row['FileName']);
      $temp->field_field_result_data[0]['rendered']['#markup'] = '<a href="/node/' . $analysis_nid . '">' . $row['FileName'] . '</a>';
      $temp->field_field_brain_region[0]['rendered']['#markup']= $row['BrainRegion'];
      //$temp->field_field_data_type[0]['rendered']['#markup'] = $row['DataType'];
      $temp->field_field_input[0]['rendered']['#markup'] = '<a href="/node/' . $input_study_nid . '">' . $row['Study']. '</a>';
      $new_result_array[] = $temp;
    }


    $view->result = $new_result_array;
    $view->total_rows = count($new_result_array);

    $plot_array = array();
    foreach($mongo_array as $row) {
      $temp1 = $row;
      $pieces = explode("_", $temp1['FileName']);
      $temp1['FileName'] = $pieces[0] . "_" . $pieces[1];
      $plot_array[] = $temp1;
    }


    // For the Forest Plot
    //For footer version, use dsm($view->footer); or dsm($view->footer['area_text_custom']->options['content']);
    $default_header = $view->header['area_text_custom']->options['content'];
    $category = "FileName";
    $chart_size = "single";

    $content1 = "<span id='htitle'>" . $gene_list . "</span>" .  hboxplot_block('vis1', $mongo_array, $category, $chart_size);

    //$content2 = "<span id='htitle'>" . $gene_list . "</span>" .  hboxplot_block('vis1', $agora_array, $category, $chart_size);

    $content = '<div id="hplots2">';
    $content .= "<span id='gtitle'></span>";
    $content .= $content1;
    //$content .= $content2;
    $content .= '</div>';
    $content .= $default_header;

    $view->header['area_text_custom']->options['content'] = $content;
    }
  }


}

function _compare_filenames($a, $b) {
    return strnatcmp($a['FileName'], $b['FileName']);
}

function _compare_br($a, $b) {
    return strnatcmp($a['BrainRegion'], $b['BrainRegion']);
}


function hboxplot_query_mongo_agora($input_gene) {


    if (empty($input_gene)) {
      $gene_list = array('PRELP');
    } else {
      $input_gene = strtoupper($input_gene);
      //Explode whitespace (tabs, new lines, spaces) and commas; old: $gene_list = explode(",", $input_genes);
      $gene_list = preg_split('/[\s ,]+/', $input_gene);
      $gene_list = array_filter($gene_list);
      $trimmed_array = array_map('trim', $gene_list);
      $gene_list = $trimmed_array;
      $species = array("human");
      $gene_list = array_map('_query_synonyms', $gene_list, $species);
      //var_dump($gene_list);

    }


    // Create a Mongo connection and connect to database //echo $db;
    $mongo = new MongoClient("mongodb://localhost");
    $db = $mongo->cats;

    // Select the expression collection for gene expression info
    $coll = $db->agora_expression;

    //Agora Specific variables
    //$strat_factor?
    $contrast = "AD-CONTROL";
    $model = "Diagnosis"; //Other options: Diagnosis, Diagnosis.Sex, APOE4, Diagnosis.AOD,"SourceDiagnosis"

    // Filter on gene
    //db.human_expression.find({"GeneSymbol":"CD33","Contrast":"AD-NCI","StratFactor":"CpDxAll"}).count()
    //$query = array("GeneSymbol" => array('$in' => $gene_list));
     $query = array( '$and' => array( array("GeneSymbol" => array('$in' => $gene_list)),
             array('Contrast' => $contrast),
             array('Model' => $model),
             ) );

    //dsm($query);

    $cursor = $coll->find($query);
    $cursor->timeout(-1);
    $cursor->sort(array('Rank' => 1));
    $cursor->limit( 500 );
    //$total = (string)$cursor->count(); //To find total number of documents
    //dsm($total);
    //$cursor->limit( 5 );

     //Access query results
     $result = array();
     $filenames = array();
     $i = 0;

     //Model,BrainRegionCode,Contrast,EnsemblID,logFC,CIL,CIR,AveExpr,t,PValue,adjPVal,B,Direction,GeneSymbol,percentage_gc_content,gene_length,Sex,Study,FileName
     foreach ($cursor as $doc) {
       //var_dump($doc);
       $result[$i]['Study'] = $doc['Study'];
       $result[$i]['BrainRegion'] = $doc['BrainRegionCode'];
       $result[$i]['Technology'] = "";
       $result[$i]['FileName'] = "Agora_" . $doc['Study'] . "_" . $doc['BrainRegionCode'];
       $result[$i]['FileName2'] = $doc['FileName'];
       //$result[$i]['ProbeID'] = !empty($doc['ProbeID']) ? $doc['ProbeID'] : "";
       $result[$i]['logFC'] = $doc['logFC'];
       $result[$i]['CIL'] = $doc['CIL'];
       $result[$i]['CIR'] = $doc['CIR'];
       $result[$i]['PValue'] = $doc['PValue'];
       $result[$i]['adjPVal'] = $doc['adjPVal'];
       $result[$i]['Sex'] = $doc['Sex'];
       $result[$i]['Model'] = $doc['Model'];
       $result[$i]['Contrast'] = $doc['Contrast'];
       $filenames[] = $doc['FileName'];
       $i++;
     }

  //dsm($result);

  return $result;

}

?>
