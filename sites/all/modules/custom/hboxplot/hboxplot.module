<?php

// Show PHP errors (during development only)
    //error_reporting(E_ALL | E_STRICT);
    //ini_set("display_errors", 2);

/**
* Implements hook_menu().
*/

function hboxplot_menu() {
  $items['forest-plot'] = array(
    'title' => 'Forest Plot',
    'description' => 'Forest Plot using D3 visualization',
    'page callback' => 'hboxplot_page',
    'access callback' => TRUE,
);

  return $items;
}

function hboxplot_page() {

  $page = "";
  $block1 = module_invoke('hboxplot', 'block_view', 'hboxplot_block1');
  $block2 = module_invoke('hboxplot', 'block_view', 'hboxplot_block2');
  $block3 = module_invoke('hboxplot', 'block_view', 'hboxplot_block3');
  $block4 = module_invoke('hboxplot', 'block_view', 'hboxplot_block4');
  $block5 = module_invoke('hboxplot', 'block_view', 'hboxplot_block5');
  $block6 = module_invoke('hboxplot', 'block_view', 'hboxplot_block6');
  //dsm($block);
  $page .= '<table id="forest-plot">';
  $page .= '<tr><td>';
  $page .= $block1['subject'] . $block1['content'];
  $page .= '</td><td>';
  $page .= $block2['subject'] . $block2['content'];
  $page .= '</td><td>';
  $page .= $block3['subject'] . $block3['content'];
  $page .= '</td></tr><tr><td>';
  $page .= $block4['subject'] . $block4['content'];
  $page .= '</td><td>';
  $page .= $block5['subject'] . $block5['content'];
  $page .= '</td><td>';
  $page .= $block6['content'];
  $page .= '</td></tr>';
  $page .= '</table>';


  return $page;
}


/**
 * Implements hook_block_info().
 *
 * This hook declares what blocks are provided by the module.
 */


function hboxplot_block_info() {
  $blocks = array();
  $blocks['hboxplot_block1'] = array(
    // info: The name of the block.
    'info' => t('AD-Normal Microarray'),
  );
  $blocks['hboxplot_block2'] = array(
    // info: The name of the block.
    'info' => t('B3-B1 Microarray'),
  );
  $blocks['hboxplot_block3'] = array(
    // info: The name of the block.
    'info' => t('Legend'),
  );
  $blocks['hboxplot_block4'] = array(
    // info: The name of the block.
    'info' => t('AD-Normal RNA-Seq'),
  );
  $blocks['hboxplot_block5'] = array(
    // info: The name of the block.
    'info' => t('B3-B1 RNA-Seq'),
  );
  $blocks['hboxplot_block6'] = array(
    // info: The name of the block.
    'info' => t('Boxplot Legend Spacer'),
  );

  return $blocks;
}


/**
 * Implements hook_block_view().
 *
 * This hook generates the contents of the blocks
 */
function hboxplot_block_view($delta = '') {
  //The $delta parameter tells us which block is being requested.
  $block = array();
  switch ($delta) {
    case 'hboxplot_block1':
      if (user_is_logged_in()) {
      	$block['subject'] = t("AD-NCI Microarray");
		    $data_rows = hboxplot_query_mongo("CD33", "uArray", "AD-NCI", "CpDxAll");
		    //dsm($data_rows);
		    $block['content'] = hboxplot_block('vis1', $data_rows);
	  }
		break;
    case 'hboxplot_block2':
      if (user_is_logged_in()) {
		  $block['subject'] = t("B3-B1 Microarray");
		  $data_rows = hboxplot_query_mongo("CD33", "uArray", "B3-B1", "Braak");
		  $block['content'] = hboxplot_block('vis2',$data_rows);
      }
      break;
    case 'hboxplot_block3':
      if (user_is_logged_in()) {
		  $block['subject'] = t("Legend");
		  $block['content'] = "<img src='/sites/all/themes/scf_theme/HBoxplot/Legend.png' style='width:100%;'/>";
      }
      break;
    case 'hboxplot_block4':
      if (user_is_logged_in()) {
		  $block['subject'] = t("AD-NCI RNA-Seq");
		  $data_rows = hboxplot_query_mongo("CD33", "RC, FPKM", "AD-NCI", "CpDxAll");
		  $block['content'] = hboxplot_block('vis4', $data_rows);
      }
      break;
    case 'hboxplot_block5':
      if (user_is_logged_in()) {
		  $block['subject'] = t("B3-B1 RNA-Seq");
		  $data_rows = hboxplot_query_mongo("CD33", "RC, FPKM", "B3-B1", "Braak");
		  $block['content'] = hboxplot_block('vis5', $data_rows);
      }
      break;
    case 'hboxplot_block6':
      if (user_is_logged_in()) {
		  $block['subject'] = t("");
		  $block['content'] = "";
      }
      break;
  }
  return $block;
}



function hboxplot_block($id, $rows) {
  $path = libraries_get_path('d3.hboxplot');
  libraries_load('d3.hboxplot');

  $chart = array(
    'id' => $id,
    'type' => 'hboxplot',
    'dtype' => 'data',
    'rows' => $rows,
  );

  return d3_draw($chart);
}

function hboxplot_block_file($id, $file) {
  $path = libraries_get_path('d3.hboxplot');
  libraries_load('d3.hboxplot');

  $chart = array(
    'id' => $id,
    'type' => 'hboxplot',
    'dtype' => 'file',
    'file' => $file,
  );

  return d3_draw($chart);
}


function hboxplot_query_mongo($input_gene, $data_type, $contrast, $strat_factor) {


    if (empty($input_gene)) {
      $gene_list = array('PRELP');
    } else {
      $input_gene = strtoupper($input_gene);
      //Explode whitespace (tabs, new lines, spaces) and commas; old: $gene_list = explode(",", $input_genes);
      $gene_list = preg_split('/[\s ,]+/', $input_gene);
      $gene_list = array_filter($gene_list);
      $trimmed_array = array_map('trim', $gene_list);
      $gene_list = $trimmed_array;
      $species = array("human");
      $gene_list = array_map('_query_synonyms', $gene_list, $species);
      //var_dump($gene_list);

    }

    $data_type = preg_split('/[\s ,]+/', $data_type);


    // Create a Mongo connection and connect to database //echo $db;
    $mongo = new MongoClient("mongodb://localhost");
    $db = $mongo->cats;

    // Select the expression collection for gene expression info
    $coll = $db->human_expression;

    // Filter on gene
    //db.human_expression.find({"GeneSymbol":"CD33","Contrast":"AD-NCI","StratFactor":"CpDxAll"}).count()
    //$query = array("GeneSymbol" => array('$in' => $gene_list));
    $query = array( '$and' => array( array("GeneSymbol" => array('$in' => $gene_list)),
             array("DataType" => array('$in' => $data_type)),
             array('Contrast' => $contrast),
             array('StratFactor' => $strat_factor),
             ) );

    //dsm($query);

    $cursor = $coll->find($query);
    $cursor->timeout(-1);
    $cursor->sort(array('Rank' => 1));
    $cursor->limit( 500 );
    //$total = (string)$cursor->count(); //To find total number of documents
    //dsm($total);
    //$cursor->limit( 5 );

     //Access query results
     $result = array();
     $i = 0;

     #Study,BrainRegion,Technology,logFC,CIL,CIR,PValue,median,min,max,Rank,row
     foreach ($cursor as $doc) {
       //var_dump($doc);
       $result[$i]['Study'] = $doc['StudyName'];
       $result[$i]['BrainRegion'] = $doc['BrainRegionCode'];
       $result[$i]['Technology'] = $doc['DataType'];
       $result[$i]['logFC'] = $doc['logFC'];
       $result[$i]['CIL'] = $doc['CIL'];
       $result[$i]['CIR'] = $doc['CIR'];
       $result[$i]['PValue'] = $doc['PValue'];
       $result[$i]['median'] = $doc['median'];
       $result[$i]['min'] = $doc['min'];
       $result[$i]['max'] = $doc['max'];
       $result[$i]['Rank'] = $doc['Rank'];
       $result[$i]['row'] = $i;
       $i++;
     }

  //dsm($result);

  return $result;

}



?>
