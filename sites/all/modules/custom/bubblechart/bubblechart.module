<?php

// Show PHP errors (during development only)
    //error_reporting(E_ALL | E_STRICT);
    //ini_set("display_errors", 2);

/**
* Implements hook_menu().
*/
function bubblechart_menu() {
  $items['bubbles'] = array(
    'title' => 'D3 visualization',
    'description' => 'Different visualization examples using d3.',
    'page callback' => 'bubblechart_csv',
    'access callback' => TRUE,
  );
  $items['genomics/%'] = array(
    'title' => 'Expression Data Bubblechart',
    'description' => 'Return expression data',
    'page callback' => 'bubblechart_genomics',
    'page arguments' => array(1),
    'access callback' => TRUE,
  );
  $items['input'] = array(
    'title' => 'Gene Symbols input',
    'description' => 'Input genes to return expression data',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('bubblechart_form'),
    'access callback' => TRUE,
    'type' => MENU_NORMAL_ITEM,
  );
  $items['downloadbubble'] = array(
    'title' => 'Download Bubblechart Table',
    'description' => 'Download Bubblechart Table',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('bubbledownload_form'),
    'access callback' => TRUE,
    'type' => MENU_NORMAL_ITEM,
  );

  return $items;
}

function bubblechart_csv() {

  $chart = array(
    'id' => 'visualization',
    'type' => 'bubblechartcsv',
  );

  return d3_draw($chart);
}


function bubblechart_genomics($input_genes) {
  $path = libraries_get_path('d3.bubblechart');
  drupal_add_css($path . '/bubblechart.css');

  $pval = 0.05;
  $result = _query_mongo($input_genes, $pval);

  $study_checkbox = _create_facet($result, 'Study');    // Returns string 35-44
  $contrast_checkbox = _create_facet($result, 'Contrast');
  $datatype_checkbox = _create_facet($result, 'DataType');
  $br_checkbox = _create_facet($result, 'BrainRegion');

  $page = '<div id="bubblechart-faq"><p>Every colored bubble is a gene, and the color indicates the fold change; red is up and blue is down. The size of the bubble indicates the size of the fold change. If you hover over a colored bubble (gene), a pop-up will give you the gene name, p-value, fold change, and study. You can filter the data using the checkboxes at the right and the sliders at the top. For more information about the Contrast, <a href="/contrast" target="_blank">view the Contrasts page</a>.</p></div>';
  $page .= '<div id="facet-group">';

  $page .= '<table id="facet-table">';
  $page .= '<tr><td>';
  $page .= $study_checkbox . $contrast_checkbox;
  $page .= '</td><td>';
  $page .= $datatype_checkbox .  $br_checkbox;
   $page .= '</td></tr>';
  $page .= '</table>';
  $page .= '</div>';
  $page .=  t(

  '<div id="slider-area">
  <div id="PValue" class="slider">
    <h4>PValue</h4><input type="text" id="PValText" class="slider-text">
    <input type="range" id="sliderPVal">
  </div>
  <div id="FCValue" class="slider">
    <h4>FCValue</h4><input type="text" id="FCValText" class="slider-text">
    <input type="range" id="sliderFCVal">
  </div>
  </div>
  <div id="legend"></div>'
  );

  $page .= _call_genomics($result);



  for($i = count($result)-1; $i >= 0; $i--){
        if(($result[$i]["GeneSymbol"]) && ($result[$i]["ProbeID"]))    {
            $result[$i]["GeneSymbol"] = $result[$i]["GeneSymbol"] . " " . $result[$i]["ProbeID"];
        }

        $analysis_nid = intval(_query_analysisId($result[$i]["FileName"]));
        $analysis_script_url = _query_analysis_script_link($analysis_nid);
        $analysis_script_title = _query_analysis_script_title($analysis_nid);

        $result[$i][0] = $result[$i]["GeneSymbol"];
        $result[$i][1] = $result[$i]["LogFC"];
        $result[$i][2] = $result[$i]["PValue"];
        $result[$i][3] = $result[$i]["AdjPValue"];
        $result[$i][4] = $result[$i]["BrainRegion"];
        //$result[$i][5] = $result[$i]["FileName"];
        $result[$i][6] = l($result[$i]["FileName"],'/node/' . $analysis_nid);
        $result[$i][7] = l($analysis_script_title, $analysis_script_url);
        $result[$i][8] = $result[$i]["Study"];
        $result[$i][9] = $result[$i]["Contrast"];
        $result[$i][10] = $result[$i]["DataType"];

        unset($result[$i]["GeneSymbol"]);
        unset($result[$i]["LogFC"]);
        unset($result[$i]["PValue"]);
        unset($result[$i]["AdjPValue"]);
        unset($result[$i]["BrainRegion"]);
        unset($result[$i]["FileName"]);
        unset($result[$i]["Study"]);
        unset($result[$i]["Contrast"]);
        unset($result[$i]["DataType"]);
        unset($result[$i]["ProbeID"]);
        unset($result[$i]["parent"]);
        unset($result[$i]["size"]);
        unset($result[$i]["name"]);
        unset($analysis_nid);
        unset($analysis_script_url);
    }

  $header = array(t('GeneSymbol'), t('LogFC'), t('PValue'), t('AdjPValue'), t('BrainRegion'), t('Analysis'), t('Analysis Script'), t('Study'), t('Contrast'), t('DataType'));

  $genes_string = strtoupper($input_genes);
  $genes_string = preg_replace('/\s+/', '_', $genes_string);

  // Create a download file button/form.
  $filename = "bubbletable_" . $genes_string . "_" . REQUEST_TIME . ".csv";
  $download_table_form = drupal_get_form('bubbledownload_form', $filename, $header, $result);
  $page .= drupal_render($download_table_form);

  // Result table display with paging
  $page .= '<div id="result-table">';
  $output = theme('table',
    array(
      "header" => $header,
      "rows" => $result,
      "attributes" => array('class' => array('tablesorter')),
      "sticky" => TRUE,
      "caption" => "",
      "colgroups" => array(),
      "empty" => t("No Records has been found")
    )
  );

  $page .= $output;
  $page .= '</div>';

  return ($page);

}

function _call_genomics($result) {
    //dsm($result);

    //$terms = array_column($result, 'parent');
    $terms = array_map(function($element){return $element['parent'];}, $result);
    //$terms = array_filter($result, "parent");
    //dsm($terms);
    $terms_unique = array_flip($terms);
    //dsm($terms_unique);

    //$vid = 21;
    $parents = array();
    foreach ($terms_unique as $key => $value) {
      $term_object = taxonomy_get_term_by_name($key);
      $tid = array_pop($term_object)->tid;
      $parent_object = taxonomy_get_parents($tid);
      if (empty($parent_object)){
        $parents[] = $key;
      } else {
        $parent_name = array_pop($parent_object)->name;
        $result[] = array('size' => 5, 'parent' => $parent_name, 'name' => $key, 'PValue' => 0);
        $parents[] = $parent_name;
      }
    }
    $parents_unique = array_flip($parents);
    //dsm($parents_unique);
    //var_dump($parents_unique);
    foreach($parents_unique as $key => $value){
      $result[] = array('size' => 5, 'parent' => 'WB', 'name' => $key, 'PValue' => 0);
    }
    $result[] = array('size' => 5, 'parent' => 'null', 'name' => 'WB', 'PValue' => 0);
    //dsm($result);

    //$file_name = 'Test_input.txt';
    //$lines = array_values($result);
    //$file_lines = implode("\n", $lines);
    //file_save_data($file_lines, 'public://' . $file_name);
    //var_dump($result);
    //dsm($result);

    //error-checking:
    //db.expression.find( { GeneSymbol: { $in: [ "RHEB", "SKA1" ]} }, { FileName: 1, GeneSymbol: 1, logFC:1, PValue:1, adjPVal:1, B:1 } ).limit( 5 );

    $chart = array(
      'id' => 'visualization',
      'type' => 'bubblechart',
      'rows' => $result,
    );

    return d3_draw($chart);
}


/**
 * Return a form used to input gene names into bubblechart
 *
 * @return
 *   An array which will be used by the form builder to build the import form
 */

function bubblechart_form($form, &$form_state) {
  $form['input_genes'] = array (
    '#type' => 'textarea',
    '#title' => t('Gene Symbols'),
    '#default_value' => '',
    '#description' => t('Paste a comma separated list of gene symbols'),
    '#size' => 60
  );

  $form['submit'] = array(
    '#type' => 'submit',
    '#value' => t('Submit'),
  );

	return $form;
}

/**
 * Implementation of hook_validate() for the bubblechart_input.
 */

function bubblechart_form_validate($form, & $form_state) {
	 $valid_genes = $form_state['values']['input_genes'];

}

function bubblechart_form_submit($form, & $form_state) {
	$valid_genes = $form_state['values']['input_genes'];

	drupal_set_message(t('Your genes are %genes.', array('%genes' => $valid_genes)));
	//return drupal_render(drupal_get_form('bubblechart_form'));

	$form_state['redirect'] = 'genomics/' . $valid_genes;
}

/**
 * Implements hook_form_alter().
 */

function bubblechart_form_alter(&$form, &$form_state,$form_id ){

 if($form['#id'] == 'views-exposed-form-evidence-page') {
    //dsm($form['title']['#type']);
    $form['title']['#type']='textarea';
    $form['title']['#cols']='30';
    $form['title']['#rows']='9';
 }

 if($form['#id'] == 'views-exposed-form-evidence-mouse-page') {
    $form['field_evidence_id_value']['#type']='textarea';
    $form['field_evidence_id_value']['#cols']='17';
    $form['field_evidence_id_value']['#rows']='9';

    $form['title']['#type']='textarea';
    $form['title']['#cols']='17';
    $form['title']['#rows']='9';
 }

}

/**
 * Return a form used to input gene names into bubblechart
 *
 * @return
 *   An array which will be used by the form builder to build the import form
 */

function bubbledownload_form($form, &$form_state, $filename, $header, $result) {
  $form['button_download'] = array(
    '#type' => 'submit',
    '#value' => t('Download Table'),
  );
  $form['filename'] = array(
   '#type' => 'hidden',
   '#value' => $filename,
  );
  $form['header'] = array(
   '#type' => 'hidden',
   '#value' => $header,
  );
  $form['result'] = array(
   '#type' => 'value',
   '#value' => $result,
  );
  //dsm($form);
	return $form;
}

/**
 * Implementation of hook_validate() for the bubblechart_input.
 */

function bubbledownload_form_validate($form, & $form_state) {

}

function bubbledownload_form_submit($form, & $form_state) {
	$filename1 = $form_state['values']['filename'];
	$header1 = $form_state['values']['header'];
	$result1 = $form_state['values']['result'];

	$file_uri = _download_file($filename1, $header1, $result1);

	$form_state['redirect'] = $file_uri;
}


function bubblechart_views_pre_render(&$view) {
  //dsm($view);

  if($view->name=='evidence'){
    //dsm($view);
    //dsm($view->exposed_input);
    //dsm($view);

    if (empty($view->exposed_input['title']) &&
        empty($view->exposed_input['term_node_tid_depth']) &&
        empty($view->exposed_input['term_node_tid_depth_1']) &&
        empty($view->exposed_input['field_contrast_tid']) &&
        empty($view->exposed_input['field_fold_change_value']) &&
        empty($view->exposed_input['term_node_tid_depth_2']) ) {
        $view->result = array();
        $view->total_rows = 0;
        $view->query->pager->total_items = 0;
        $view->query->pager->update_page_info();
        $view->empty['area']->options['content'] = "Please select 1 or more filter options above and click the Apply button.";
    }

    if (!empty($view->exposed_input['title'])) {
      $gene_list = $view->exposed_input['title'];
      //dsm($gene_list);
      //var_dump($gene_list);
      $pval=$view->exposed_input['field_pvalue_value'];
      $mongo_array = _query_mongo_table($gene_list, $pval);
      $filtered_mongo = $mongo_array;
      //var_dump($mongo_array);

      // Brain Region
      if (!empty($view->exposed_input['term_node_tid_depth'])) {
        $brain_region = $view->exposed_input['term_node_tid_depth'];
        //dsm($brain_region);
        $terms = array();
        foreach($brain_region as $tid) {
          $term = taxonomy_term_load($tid)->name;
          array_push($terms, $term);
          }
          //dsm($terms);
          $filtered_mongo = array_filter($filtered_mongo,
          function($v) use ($terms){
            return in_array($v['BrainRegion'], $terms);
            });
          //dsm($filtered_mongo);
      }

      // Data Type
      if (!empty($view->exposed_input['term_node_tid_depth_1'])) {
        $data_type = $view->exposed_input['term_node_tid_depth_1'];
        //dsm($data_type);
        $terms = array();
        foreach($data_type as $tid) {
          $term = taxonomy_term_load($tid)->name;
          if ($term === "Array Expression" ) {
            $term = "uArray";
          }
          if ($term === "RNA-seq" ) {
            array_push($terms, "CPM", "RC", "FPKM");

          } else {
            array_push($terms, $term);
          }
        }
          //dsm($terms);
          $filtered_mongo = array_filter($filtered_mongo,
          function($v) use ($terms){
            return in_array($v['DataType'], $terms);
            });
          //dsm($filtered_mongo);
      }

      // Group/Study
      if (!empty($view->exposed_input['term_node_tid_depth_2'])) {
        $study = $view->exposed_input['term_node_tid_depth_2'];

        $terms = array();

        foreach($study as $tid) {
          $term = taxonomy_term_load($tid)->name;
          array_push($terms, $term);
        }
        $filtered_mongo = array_filter($filtered_mongo,
          function($v) use ($terms){
            return in_array($v['Study'], $terms);
           });
        //dsm($filtered_mongo);

      }


      // Fold Change
      if (!empty($view->exposed_input['field_fold_change_value'])) {
        $fc_gt = $view->exposed_input['field_fold_change_value'];
        //dsm($fc_gt);
        $filtered_mongo = array_filter($filtered_mongo,
        function($v) use ($fc_gt){return pow(2,abs($v['LogFC'])) >= $fc_gt;});
      }


      // Contrast
      if (!empty($view->exposed_input['field_contrast_tid'])) {
        $contrast = $view->exposed_input['field_contrast_tid'];
        //dsm($contrast);
        $terms = array();
        foreach($contrast as $tid) {
          $term = taxonomy_term_load($tid)->name;
          array_push($terms, $term);
        }
          //dsm($terms);
          $filtered_mongo = array_filter($filtered_mongo,
          function($v) use ($terms){
            return in_array($v['Contrast'], $terms);
          });
      }

      if (!empty($view->exposed_input['field_pvalue_value'])) {
        $pvalue = $view->exposed_input['field_pvalue_value'];
        //dsm($pvalue);
        $filtered_mongo = array_filter($filtered_mongo,
        function($v) use ($pvalue){return $v['PValue'] < $pvalue;});

      }

      $new_result_array = array();
      foreach($filtered_mongo as $row) {
         //$row[] = array($value['Study'], $value['BrainRegion'], $value['DataType'], $value['Contrast'], $value['GeneSymbol'], $value['LogFC'], $value['PValue'], $value['AdjPVal'], $value['FileName']););
        $analysis_nid = intval(_query_analysisId($row['FileName']));
        $input_study_nid = intval(_query_inputId($analysis_nid));
        //var_dump($analysis_id);
        $temp = new stdClass;
        $temp->node_title = $row['GeneSymbol'] . " " . $row['ProbeID'];
        $temp->field_field_probe_id[0]['rendered']['#markup'] = $row['ProbeID'];
        $temp->field_field_pvalue[0]['raw']['value'] = $row['PValue'];
        $temp->field_field_fold_change[0]['raw']['value'] = $row['LogFC'];
        $temp->field_field_fold_change[0]['rendered']['#markup'] = $row['LogFC'];
        $temp->field_field_result_data[0]['raw']['target_id'] = _query_analysisId($row['FileName']);
        $temp->field_field_result_data[0]['rendered']['#markup'] = '<a href="/node/' . $analysis_nid . '">' . $row['FileName'] . '</a>';
        $temp->field_field_brain_region[0]['rendered']['#markup']= $row['BrainRegion'];
        $temp->field_field_data_type[0]['rendered']['#markup'] = $row['DataType'];
        $temp->field_field_input[0]['rendered']['#markup'] = '<a href="/node/' . $input_study_nid . '">' . $row['Study']. '</a>';
        $new_result_array[] = $temp;
      }


      $view->result = $new_result_array;
      $view->total_rows = count($new_result_array);
      //$view->query->pager->total_items = count($new_result_array);
      //$view->query->pager->update_page_info();

    }

  }


  if($view->name=='evidence_mouse'){
    //dsm($view);
    //dsm($view->exposed_input);

    //field_evidence_id_value

    if (empty($view->exposed_input['field_evidence_id_value']) &&
        empty($view->exposed_input['title']) &&
        empty($view->exposed_input['term_node_tid_depth']) &&
        empty($view->exposed_input['field_perturbation_tid']) &&
        empty($view->exposed_input['term_node_tid_depth_1']) &&
        empty($view->exposed_input['term_node_tid_depth_2']) &&
        empty($view->exposed_input['field_fold_change_value']) ) {
        $view->result = array();
        $view->total_rows = 0;
        $view->query->pager->total_items = 0;
        $view->query->pager->update_page_info();
        $view->empty['area']->options['content'] = "Please select 1 or more filter options above and click the Apply button.";
    }

    if ( !empty($view->exposed_input['field_evidence_id_value']) || !empty($view->exposed_input['title']) ) {
      $pval=$view->exposed_input['field_pvalue_value'];

      //If mouse empty, take human, otherwise, always take mouse (even if both filled)
      if ( empty($view->exposed_input['field_evidence_id_value']) ) {
          $species = array("human");
          $gene_list = $view->exposed_input['title'];
      } else {
          $species = array("mouse");
          $gene_list = $view->exposed_input['field_evidence_id_value'];
      }
      //dsm($gene_list);
      //var_dump($gene_list);
      //dsm($species);

      $mongo_array = _query_mongo_mouse_table($gene_list, $pval, $species);
      $filtered_mongo = $mongo_array;
      //var_dump($mongo_array);


      // Brain Region
      if (!empty($view->exposed_input['term_node_tid_depth'])) {
        $brain_region = $view->exposed_input['term_node_tid_depth'];
        //dsm($brain_region);
        $terms = array();
        foreach($brain_region as $tid) {
          $term = taxonomy_term_load($tid)->name;
          array_push($terms, $term);
          }
          //dsm($terms);
          $filtered_mongo = array_filter($filtered_mongo,
          function($v) use ($terms){
            return in_array($v['BrainRegion'], $terms);
            });
          //dsm($filtered_mongo);
      }

      // Data Type
      if (!empty($view->exposed_input['term_node_tid_depth_1'])) {
        $data_type = $view->exposed_input['term_node_tid_depth_1'];
        //dsm($data_type);
        $terms = array();
        foreach($data_type as $tid) {
          $term = taxonomy_term_load($tid)->name;
          if ($term === "Array Expression" ) {
            $term = "uArray";
          }
          if ($term === "RNA-seq" ) {
            array_push($terms, "CPM", "RC", "FPKM");

          } else {
            array_push($terms, $term);
          }
        }
          //dsm($terms);
          $filtered_mongo = array_filter($filtered_mongo,
          function($v) use ($terms){
            return in_array($v['DataType'], $terms);
            });
          //dsm($filtered_mongo);
      }

      // Group/Study
      if (!empty($view->exposed_input['term_node_tid_depth_2'])) {
        $study = $view->exposed_input['term_node_tid_depth_2'];

        $terms = array();

        foreach($study as $tid) {
          $term = taxonomy_term_load($tid)->name;
          array_push($terms, $term);
        }
        $filtered_mongo = array_filter($filtered_mongo,
          function($v) use ($terms){
            return in_array($v['Study'], $terms);
           });
        //dsm($filtered_mongo);

      }


      // Fold Change
      if (!empty($view->exposed_input['field_fold_change_value'])) {
        $fc_gt = $view->exposed_input['field_fold_change_value'];
        //dsm($fc_gt);
        $filtered_mongo = array_filter($filtered_mongo,
        function($v) use ($fc_gt){return pow(2,abs($v['LogFC'])) >= $fc_gt;});
      }


      // Perturbation
      if (!empty($view->exposed_input['field_perturbation_tid'])) {
        $perturbation = $view->exposed_input['field_perturbation_tid'];
        //dsm($$perturbation);
        $terms = array();
        foreach($perturbation as $tid) {
          $term = taxonomy_term_load($tid)->name;
          array_push($terms, $term);
        }
          //dsm($terms);
          $filtered_mongo = array_filter($filtered_mongo,
          function($v) use ($terms){
            return in_array($v['Perturbation'], $terms);
          });
      }

      if (!empty($view->exposed_input['field_pvalue_value'])) {
        $pvalue = $view->exposed_input['field_pvalue_value'];
        //dsm($pvalue);
        $filtered_mongo = array_filter($filtered_mongo,
        function($v) use ($pvalue){return $v['PValue'] < $pvalue;});

      }

      $new_result_array = array();
      foreach($filtered_mongo as $row) {
         //$row[] = array($value['Study'], $value['BrainRegion'], $value['DataType'], $value['Contrast'], $value['GeneSymbol'], $value['LogFC'], $value['PValue'], $value['AdjPVal'], $value['FileName']););
        $analysis_nid = intval(_query_analysisId($row['FileName']));
        $input_study_nid = intval(_query_inputId($analysis_nid));
        //var_dump($analysis_id);
        $temp = new stdClass;
        $temp->node_title = $row['Mouse_Ortholog'] . " " . $row['ProbeID'];
        //$temp->field_field_probe_id[0]['rendered']['#markup'] = $row['ProbeID'];
        $temp->field_field_genes_diff[0]['rendered']['#markup'] = $row['GeneSymbol'];
        $temp->field_field_pvalue[0]['raw']['value'] = $row['PValue'];
        $temp->field_field_fold_change[0]['raw']['value'] = $row['LogFC'];
        $temp->field_field_fold_change[0]['rendered']['#markup'] = $row['LogFC'];
        $temp->field_field_result_data[0]['raw']['target_id'] = _query_analysisId($row['FileName']);
        $temp->field_field_result_data[0]['rendered']['#markup'] = '<a href="/node/' . $analysis_nid . '">' . $row['FileName'] . '</a>';
        $temp->field_field_brain_region[0]['rendered']['#markup']= $row['BrainRegion'];
        $temp->field_field_data_type[0]['rendered']['#markup'] = $row['DataType'];
        $temp->field_field_input[0]['rendered']['#markup'] = '<a href="/node/' . $input_study_nid . '">' . $row['Study']. '</a>';
        $new_result_array[] = $temp;
      }


      $view->result = $new_result_array;
      $view->total_rows = count($new_result_array);
      //$view->query->pager->total_items = count($new_result_array);
      //$view->query->pager->update_page_info();

    }

  }
}

function _query_analysisId($input) {
    $query = db_select('field_data_field_result', 'fr');
    $query->join('field_data_field_files', 'ff', 'fr.field_result_value = ff.entity_id');
    $query->join('file_managed', 'fm', 'ff.field_files_fid = fm.fid');
    $query->fields('fr', array('entity_id'));
    $query->condition('fm.filename',$input,'=');
    $result = $query->execute()->fetchfield();
    return($result);

}

function _query_analysis_script_link($input) {
    $query = db_select('field_data_field_links', 'fl');
    $query->fields('fl', array('field_links_url'));
    $query->condition('fl.entity_id',$input,'=');
    $result = $query->execute()->fetchfield();
    return($result);
}

function _query_analysis_script_title($input) {
    $query = db_select('field_data_field_links', 'fl');
    $query->fields('fl', array('field_links_title'));
    $query->condition('fl.entity_id',$input,'=');
    $result = $query->execute()->fetchfield();
    return($result);
}

function _query_inputId($input) {
    //select field_input_target_id from field_data_field_input where entity_id =
    $query = db_select('field_data_field_input', 'fi');
    $query->fields('fi', array('field_input_target_id'));
    $query->condition('fi.entity_id',$input,'=');
    $result = $query->execute()->fetchfield();
    return($result);

}

function _query_synonyms($input, $species) {

    //dsm($species);
    if ($species == "mouse" ) {
      $vid = 29;
    } else {
      $vid = 25;
    }
    //dsm($vid);

    // First check gene
    $query = db_select('taxonomy_term_data', 'tt');
    $query->fields('tt', array('tid'));
    $query->condition('tt.name',$input,'=');
    $query->condition('tt.vid', $vid, '=');
    $tid = $query->execute()->fetchfield();

    if($tid) {
      return($input);
    }
    else {
      // Check synonyms
      $query = db_select('field_data_field_synonyms ', 'fs');
      $query->join('taxonomy_term_data', 'tt', 'fs.entity_id = tt.tid');
      $query->fields('tt', array('name'));
      $query->condition('fs.field_synonyms_value',$input,'=');
      $query->condition('tt.vid', $vid, '=');
      $result = $query->execute()->fetchfield();
      //dsm($result);
      if(!$result) {
        drupal_set_message(t('Cannot find gene @var.', array('@var' => $input)));
      }
      return($result);
    }

}

function _query_mongo($input_genes, $pval) {

    if (empty($input_genes)) {
      $gene_list = array('PRELP');
    } else {
      $input_genes = strtoupper($input_genes);
      //Explode whitespace (tabs, new lines, spaces) and commas; old: $gene_list = explode(",", $input_genes);
      $gene_list = preg_split('/[\s ,]+/', $input_genes);
      $gene_list = array_filter($gene_list);
      $trimmed_array = array_map('trim', $gene_list);
      $gene_list = $trimmed_array;
      $species = array("human");
      $gene_list = array_map('_query_synonyms', $gene_list, $species);
      //var_dump($gene_list);

    }

    if(empty($pval)) {
      $pval=0.05;
    }


    // Create a Mongo connection and connect to database //echo $db;
    $mongo = new MongoClient("mongodb://localhost");
    $db = $mongo->cats;

    // Select the expression collection for gene expression info
    $coll = $db->expression;

    // Filter on genes and p-value
    //$query = array("GeneSymbol" => array('$in' => $gene_list));
    //Mongo on server is version 2.6.12 and p-values in scientific notation were being stored as string
    // Fixed by finding p-value that are string and updating to double
    $query = array( '$and' => array( array("GeneSymbol" => array('$in' => $gene_list)),
             array('PValue' => array('$lt' => (float)$pval) ) ) );


    $cursor = $coll->find($query);
    $cursor->timeout(-1);
    $cursor->sort(array('PValue' => 1));
    $cursor->limit( 500 );
    //$total = (string)$cursor->count(); //To find total number of documents
    //dsm($total);
    //$cursor->limit( 5 );

     //Access query results
     $result = array();
     $filenames = array();
     $i = 0;

     foreach ($cursor as $doc) {
       //var_dump($doc);
       $result[$i]['FileName'] = $doc['FileName'];
       $result[$i]['GeneSymbol'] = $doc['GeneSymbol'];
       $result[$i]['LogFC'] = $doc['logFC'];
       $result[$i]['PValue'] = $doc['PValue'];
       $result[$i]['AdjPValue'] = !empty($doc['adjPVal']) ? $doc['adjPVal'] : "";
       $result[$i]['ProbeID'] = !empty($doc['ProbeID']) ? $doc['ProbeID'] : "";
       $result[$i]['size'] = abs($doc['logFC']);
       $filenames[] = $doc['FileName'];
       $i++;
     }


// 		 Check the main for the meta data: Study,parent,DataType,Contrast
     $coll2 = $db->main;
     $query2 = array('FileName' => array('$in' => $filenames));
     $cursor2 = $coll2->find($query2);
     $main_result =  array();
     $i = 0;
     foreach ($cursor2 as $doc) {
       $main_result[$i]['FileName'] = $doc['FileName'];
       $main_result[$i]['Study'] = $doc['StudyName'];
       $main_result[$i]['BrainRegion'] = $doc['BrainRegionFull'];
       $main_result[$i]['parent'] = $doc['BrainRegionFull'];
       $main_result[$i]['DataType'] = $doc['DataType'];
       $main_result[$i]['Contrast'] = $doc['Contrast'] . ": " . $doc['StratFactor'];
       $i++;
     }
 	  //var_dump($main_result);

 	  // Incorporate main metadata into result array.
 	  $row = array();
    	foreach($result as &$value){
     	$file = $value['FileName'];
     	$main_key = array_search($file, array_map(function($element){return $element['FileName'];}, $main_result));
 		  $value['Study'] = $main_result[$main_key]['Study'];
 		  $value['BrainRegion'] = $main_result[$main_key]['BrainRegion'];
 		  $value['DataType'] = $main_result[$main_key]['DataType'];
 		  $value['Contrast'] = $main_result[$main_key]['Contrast'];
 		  $value['parent'] = $main_result[$main_key]['parent'];
 		  $row[] = array(
 		    'Study' => $value['Study'],
 		    'BrainRegion' => $value['BrainRegion'],
 		    'parent' => $value['parent'],
 		    'DataType' => $value['DataType'],
 		    'Contrast' => $value['Contrast'],
 		    'GeneSymbol' => $value['GeneSymbol'],
 		    'LogFC' => $value['LogFC'],
 		    'PValue' => $value['PValue'],
 		    'AdjPValue' => $value['AdjPValue'],
 		    'FileName' => $value['FileName'],
 		    'ProbeID' => $value['ProbeID'],
 		    'size' => $value['size'],
 		    'name' => $value['GeneSymbol'],
 		    );
 	  }

  return $row;

}

function _query_mongo_table($input_genes, $pval) {

    if (empty($input_genes)) {
      $gene_list = array('PRELP');
    } else {
      $input_genes = strtoupper($input_genes);
      //Explode whitespace (tabs, new lines, spaces) and commas; old: $gene_list = explode(",", $input_genes);
      $gene_list = preg_split('/[\s ,]+/', $input_genes);
      $gene_list = array_filter($gene_list);
      $trimmed_array = array_map('trim', $gene_list);
      $gene_list = $trimmed_array;
      $species = array("human");
      $gene_list = array_map('_query_synonyms', $gene_list, $species);
      //var_dump($gene_list);

    }

    if(empty($pval)) {
      $pval=0.05;
    }


    // Create a Mongo connection and connect to database //echo $db;
    $mongo = new MongoClient("mongodb://localhost");
    $db = $mongo->cats;

    // Select the expression collection for gene expression info
    $coll = $db->expression;

    // Filter on genes and p-value
    //$query = array("GeneSymbol" => array('$in' => $gene_list));
    //Mongo on server is version 2.6.12 and p-values in scientific notation were being stored as string
    // Fixed by finding p-value that are string and updating to double
    $query = array( '$and' => array( array("GeneSymbol" => array('$in' => $gene_list)),
             array('PValue' => array('$lt' => (float)$pval) ) ) );


    $cursor = $coll->find($query);
    $cursor->timeout(-1);
    $cursor->sort(array('PValue' => 1));
    $cursor->limit( 500 );
    //$total = (string)$cursor->count(); //To find total number of documents
    //dsm($total);
    //$cursor->limit( 5 );

     //Access query results
     $result = array();
     $filenames = array();
     $i = 0;

     foreach ($cursor as $doc) {
       //var_dump($doc);
       $result[$i]['FileName'] = $doc['FileName'];
       $result[$i]['GeneSymbol'] = $doc['GeneSymbol'];
       $result[$i]['LogFC'] = $doc['logFC'];
       $result[$i]['PValue'] = $doc['PValue'];
       $result[$i]['AdjPValue'] = !empty($doc['adjPVal']) ? $doc['adjPVal'] : "";
       $result[$i]['ProbeID'] = !empty($doc['ProbeID']) ? $doc['ProbeID'] : "";
       $result[$i]['size'] = abs($doc['logFC']);
       $filenames[] = $doc['FileName'];
       $i++;
     }


// 		 Check the main for the meta data: Study,parent,DataType,Contrast
     $coll2 = $db->main;
     $query2 = array('FileName' => array('$in' => $filenames));
     $cursor2 = $coll2->find($query2);
     $main_result =  array();
     $i = 0;
     foreach ($cursor2 as $doc) {
       $main_result[$i]['FileName'] = $doc['FileName'];
       $main_result[$i]['Study'] = $doc['StudyName'];
       $main_result[$i]['BrainRegion'] = $doc['BrainRegionFull'];
       $main_result[$i]['parent'] = $doc['BrainRegionFull'];
       $main_result[$i]['DataType'] = $doc['DataType'];
       $main_result[$i]['Contrast'] = $doc['Contrast'];
       $i++;
     }
 	  //var_dump($main_result);

 	  // Incorporate main metadata into result array.
 	  $row = array();
    	foreach($result as &$value){
     	$file = $value['FileName'];
     	$main_key = array_search($file, array_map(function($element){return $element['FileName'];}, $main_result));
 		  $value['Study'] = $main_result[$main_key]['Study'];
 		  $value['BrainRegion'] = $main_result[$main_key]['BrainRegion'];
 		  $value['DataType'] = $main_result[$main_key]['DataType'];
 		  $value['Contrast'] = $main_result[$main_key]['Contrast'];
 		  $value['parent'] = $main_result[$main_key]['parent'];
 		  $row[] = array(
 		    'Study' => $value['Study'],
 		    'BrainRegion' => $value['BrainRegion'],
 		    'parent' => $value['parent'],
 		    'DataType' => $value['DataType'],
 		    'Contrast' => $value['Contrast'],
 		    'GeneSymbol' => $value['GeneSymbol'],
 		    'LogFC' => $value['LogFC'],
 		    'PValue' => $value['PValue'],
 		    'AdjPValue' => $value['AdjPValue'],
 		    'FileName' => $value['FileName'],
 		    'ProbeID' => $value['ProbeID'],
 		    'size' => $value['size'],
 		    'name' => $value['GeneSymbol'],
 		    );
 	  }

  return $row;

}

function _query_mongo_mouse_table($input_genes, $pval, $species) {

    if (empty($input_genes)) {
      $gene_list = array('PRELP');
    } else {
       $input_genes = strtoupper($input_genes);
        //Explode whitespace (tabs, new lines, spaces) and commas; old: $gene_list = explode(",", $input_genes);
        $gene_list = preg_split('/[\s ,]+/', $input_genes);
        $gene_list = array_filter($gene_list);
        $trimmed_array = array_map('trim', $gene_list);
        $gene_list = $trimmed_array;

        $tax_species = array($species[0]);

      if ($species[0] == "mouse" ) {
        //Mouse genes: make first letter cap, and the rest lc
        $mouse_lower = array_map('strtolower', $gene_list);
        $gene_list = array_map('ucfirst', $mouse_lower);
      }
      //var_dump($gene_list);
      $gene_list = array_map('_query_synonyms', $gene_list, $tax_species);
    }

    if(empty($pval)) {
      $pval = 0.05;
    }

    // Create Mongo connection, connect to database and collection //echo $db;
    $mongo = new MongoClient("mongodb://localhost");
    $db = $mongo->cats;
    $coll = $db->mouse_expression;

    // Filter on genes and p-value
    //$query = array("GeneSymbol" => array('$in' => $gene_list));
    //Mongo on server is version 2.6.12 and p-values in scientific notation were being stored as string
    // Fixed by finding p-value that are string and updating to double

    var_dump($gene_list);
    var_dump($species[0]);
    if ($species[0] == "human") {
      $query = array( '$and' => array( array("GeneSymbol" => array('$in' => $gene_list)),
             array('PValue' => array('$lt' => (float)$pval) ) ) );
    }

    if ($species[0] == "mouse") {
       $query = array( '$and' => array( array("Mouse_Ortholog" => array('$in' => $gene_list)),
             array('PValue' => array('$lt' => (float)$pval) ) ) );
    }


    #ProbeID,GeneSymbol,Mouse_Entrez,Mouse_Ortholog,logFC,AveExpr,t,PValue,adjPValue,FileName

    $cursor = $coll->find($query);
    $cursor->timeout(-1);
    $cursor->sort(array('PValue' => 1));
    $cursor->limit( 500 );
    //$total = (string)$cursor->count(); //To find total number of documents
    //dsm($total);
    //$cursor->limit( 5 );

     //Access query results
     $result = array();
     $filenames = array();
     $i = 0;

     foreach ($cursor as $doc) {
       //var_dump($doc);
       $result[$i]['FileName'] = $doc['FileName'];
       $result[$i]['GeneSymbol'] = !empty($doc['GeneSymbol']) ? $doc['GeneSymbol'] : "";
       $result[$i]['Mouse_Ortholog'] = $doc['Mouse_Ortholog'];
       $result[$i]['LogFC'] = $doc['logFC'];
       $result[$i]['PValue'] = $doc['PValue'];
       $result[$i]['AdjPValue'] = !empty($doc['adjPVal']) ? $doc['adjPVal'] : "";
       $result[$i]['ProbeID'] = !empty($doc['ProbeID']) ? $doc['ProbeID'] : "";
       $filenames[] = $doc['FileName'];
       $i++;
     }


// 		 Check the mouse main for the meta data: Study,parent,DataType, Perturbation
     $coll2 = $db->mouse_main;
     $query2 = array('FileName' => array('$in' => $filenames));
     $cursor2 = $coll2->find($query2);
     $main_result =  array();
     $i = 0;
     foreach ($cursor2 as $doc) {
       $main_result[$i]['FileName'] = $doc['FileName'];
       $main_result[$i]['Study'] = $doc['StudyName'];
       $main_result[$i]['BrainRegion'] = $doc['BrainRegionFull'];
       $main_result[$i]['parent'] = $doc['BrainRegionFull'];
       $main_result[$i]['DataType'] = $doc['DataType'];
       $main_result[$i]['Perturbation'] = $doc['Perturbation'];
       $i++;
     }
 	  //var_dump($main_result);

 	  // Incorporate main metadata into result array.
 	  $row = array();
    	foreach($result as &$value){
     	$file = $value['FileName'];
     	$main_key = array_search($file, array_map(function($element){return $element['FileName'];}, $main_result));
 		  $value['Study'] = $main_result[$main_key]['Study'];
 		  $value['BrainRegion'] = $main_result[$main_key]['BrainRegion'];
 		  $value['DataType'] = $main_result[$main_key]['DataType'];
 		  $value['Perturbation'] = $main_result[$main_key]['Perturbation'];
 		  $value['parent'] = $main_result[$main_key]['parent'];
 		  $row[] = array(
 		    'Study' => $value['Study'],
 		    'BrainRegion' => $value['BrainRegion'],
 		    'parent' => $value['parent'],
 		    'DataType' => $value['DataType'],
 		    'Perturbation' => $value['Perturbation'],
 		    'Mouse_Ortholog' => $value['Mouse_Ortholog'],
 		    'GeneSymbol' => $value['GeneSymbol'],
 		    'LogFC' => $value['LogFC'],
 		    'PValue' => $value['PValue'],
 		    'AdjPValue' => $value['AdjPValue'],
 		    'FileName' => $value['FileName'],
 		    'ProbeID' => $value['ProbeID'],
 		    'name' => $value['GeneSymbol'],
 		    );
 	  }

  return $row;

}

function _create_facet($result, $type) {
  $lines = "";
  if ($type == "Study") {
    $terms = array_map(function($element){return $element['Study'];}, $result);
    $terms_unique = array_flip($terms);
    $lines .= '<div class="list-group"><h4>Study</h4><div class="facet-list">';
    foreach ($terms_unique as $key => $value) {
      $lines .= '<label><input type="checkbox" class="cbox study" value="' . $key . '"> '. $key . '</label><br>';
    }
    $lines .='</div></div>';
  }
  if ($type == "Contrast") {
    $terms = array_map(function($element){return $element['Contrast'];}, $result);
    $terms_unique = array_flip($terms);
    $lines .= '<div class="list-group"><h4>Contrast</h4><div class="facet-list">';
    $sorted_contrast = _sort_facet($terms_unique, $type);
    foreach ($sorted_contrast as $key => $value) {
      $lines .= '<label><input type="checkbox" class="cbox contrast" value="' . $key . '"> '. $key . '</label><br>';
    }
    $lines .='</div></div>';
  }
  if ($type == "BrainRegion") {
    $terms = array_map(function($element){return $element['BrainRegion'];}, $result);
    $terms_unique = array_flip($terms);
    $lines .= '<div class="list-group"><h4>Brain Region</h4><div class="facet-list">';
    $sorted_br = _sort_facet($terms_unique, $type);
    foreach ($sorted_br as $key => $value) {
      $lines .= '<label><input type="checkbox" class="cbox brainRegion" value="' . $key . '"> '. $key . '</label><br>';
    }
    $lines .='</div></div>';
  }
  if ($type == "DataType") {
    $terms = array_map(function($element){return $element['DataType'];}, $result);
    $terms_unique = array_flip($terms);
    $lines .= '<div class="list-group"><h4>Data Type</h4><div class="facet-list">';
    foreach ($terms_unique as $key => $value) {
      $lines .= '<label><input type="checkbox" class="cbox dataType" value="' . $key . '"> '. $key . '</label><br>';
    }
    $lines .='</div></div>';
  }

  //dsm($terms_unique);
  //dsm($lines);

  return($lines);

}

//array_diff($series_full, $used);

function _key_contrast($input_key) {
    switch($input_key) {
        case 'AD-NCI: CDR': return 1;
        case 'AD-NCI: ClinicalDiagnosis': return 2;
        case 'AD-NCI: MMSE': return 3;
        case 'AD-NCI: CpDxAll': return 4;
        case 'AD-NCI: CpDxLow': return 5;
        case 'AD-NCI: CpDxStrict': return 6;
        case 'B3-B1: Braak': return 7;
        case 'B2-B1: Braak': return 8;
        case 'B3-B2: Braak': return 9;
        case 'C1-C0: CERAD': return 10;
        case 'C2-C0: CERAD': return 11;
        case 'C3-C0: CERAD': return 12;
        case 'AD-DNAD: ClinicalDiagnosis': return 13;
        case 'AD-DNAD: CpDxAll': return 14;
        case 'AD-DNAD: CpDxLow': return 15;
        case 'AD-DNAD: CpDxStrict': return 16;
        case 'AD-PC: CpDxAll': return 17;
        case 'AD-PC: CpDxLow': return 18;
        case 'AD-PC: CpDxStrict': return 19;
        case 'AD-HD: ClinicalDiagnosis': return 20;
        case 'AD-PA: ClinicalDiagnosis': return 21;
        case 'AD-PSP: ClinicalDiagnosis': return 22;
        case 'PC-NCI: CpDxAll': return 23;
        case 'PC-NCI: CpDxLow': return 24;
        case 'PC-NCI: CpDxStrict': return 25;
        case 'DNAD-NCI: ClinicalDiagnosis': return 26;
        case 'DNAD-NCI: CpDxAll': return 27;
        case 'DNAD-NCI: CpDxLow': return 28;
        case 'DNAD-NCI: CpDxStrict': return 29;
        case 'Dementia-Control: ACTClinicalDiagnosis': return 30;
        case 'E4-NoE4: ApoE E4 Allele': return 31;
        case 'TBI-Control: TBI History': return 32;
        case 'HD-NCI: ClinicalDiagnosis': return 33;
        case 'PA-NCI: ClinicalDiagnosis': return 34;
        case 'PSP-NCI: ClinicalDiagnosis': return 35;
        default: return $key;
    }
}

function _key_brain_region($input_key) {
    switch($input_key) {
        case 'Cerebellum': return 100;
        case 'Cingulum': return 200;
        case 'Anterior Cingulate': return 201;
        case 'Posterior Cingulate Cortex': return 202;
        case 'Forebrain': return 300;
        case 'White Matter of Forebrain': return 301;
        case 'Frontal lobe': return 400;
        case 'Dorsolateral Prefrontal Cortex': return 401;
        case 'Frontal Pole': return 402;
        case 'Inferior Frontal Gyrus': return 403;
        case 'Medial Frontal Gyrus': return 404;
        case 'Prefrontal Cortex': return 405;
        case 'Precentral Gyrus': return 405;
        case 'Global': return 500;
        case 'Cortex': return 501;
        case 'Limbic system': return 600;
        case 'Amygdala': return 601;
        case 'Dentate Gyrus': return 602;
        case 'Hippocampus': return 603;
        case 'Nucleus Accumbens': return 604;
        case 'Parahippocampal Gyrus': return 605;
        case 'Occipital lobe': return 700;
        case 'Occipital Visual Cortex': return 701;
        case 'Parietal': return 800;
        case 'Parietal Neocortex': return 801;
        case 'Superior Parietal Lobule': return 802;
        case 'Striatum': return 900;
        case 'Caudate Nucleus': return 901;
        case 'Putamen': return 902;
        case 'Temporal lobe': return 1000;
        case 'Entorhinal Cortex': return 1001;
        case 'Inferior Temporal Gyrus': return 1002;
        case 'Middle Temporal Gyrus': return 1003;
        case 'Superior Temporal Gyrus': return 1004;
        case 'Temporal': return 1005;
        case 'Temporal Cortex': return 1006;
        case 'Temporal Pole': return 1007;
        default: return $input_key;
    }
}

function _cmp($a, $b) {
    if ($a == $b) {
        return 0;
    }
    return ($a < $b) ? -1 : 1;
}

function _sort_facet($input, $facet_type) {
  if ($facet_type === "Contrast") {
    foreach ($input as $key => $value) {
      $input[$key] = _key_contrast($key);
    }
  }
  if ($facet_type === "BrainRegion") {
    foreach ($input as $key => $value) {
      $input[$key] = _key_brain_region($key);
    }
  }
   uasort($input, '_cmp');
   return($input);
}

function _download_file($filename, $header, $rows) {
 $path = 'public://';

 $file = file_save_data('', $path . $filename);
  if( !$file ){
    drupal_set_message( t('Unable to write to file system. Check permissions and try again.'), 'error' );
    return;
  }
  // Stream data - This is a simplified example. Better to do it in a batch if you have a high volume of data
  $fh = fopen($file->uri, 'w');
  if( !$fh ){
    drupal_set_message( t('Unable open file for writing. Check permissions and try again.'), 'error' );
    return;
  }
  fputcsv($fh, $header);
  foreach ($rows as $row) {
    fputcsv($fh, $row);
  }
  fclose($fh);

  // Notify the filesystem of the size change
  $file->filesize = filesize($file->uri);
  $file->status = ""; //Not FILE_STATUS_PERMANENT
  file_save($file);

  $file_url = file_create_url($file->uri);

  return($file_url);

}

?>
