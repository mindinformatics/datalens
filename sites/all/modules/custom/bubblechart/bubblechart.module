<?php

// Show PHP errors (during development only)
    //error_reporting(E_ALL | E_STRICT);
    //ini_set("display_errors", 2);

/**
 * Implements hook_block_info().
 *
 * This hook declares what blocks are provided by the module.
 */
function bubblechart_block_info() {
  $blocks = array();
  $blocks['bubble_block'] = array(
    // info: The name of the block.
    'info' => t('Bubble Chart generated by D3'),
  );
  return $blocks;
}


/**
 * Implements hook_block_view().
 *
 * This hook generates the contents of the blocks
 */
function bubblechart_block_view($delta = '') {
  //The $delta parameter tells us which block is being requested.
  switch ($delta) {
    case 'bubble_block':
      $block['subject'] = t("Bubble Chart");
      $block['content'] =  t("This is a title\n");
      $block['content'] .= bubblechart_bubblechart();
      break;
  }
  return $block;
}

/**
* Implements hook_menu().
*/
function bubblechart_menu() {
  $items['bubbles'] = array(
    'title' => 'D3 bubble test',
    'description' => 'Different visualization examples using d3.',
    'page callback' => 'bubblechart_bubblechart',
    'access callback' => TRUE,
  );
  $items['genomics'] = array(
    'title' => 'Mongo Expression Data',
    'description' => 'Return expression data from a mongo collection',
    'page callback' => 'bubblechart_genomics',
    'access callback' => TRUE,
  );

  return $items;
}

function bubblechart_test() {
   return t("Hello World\n");
}

function bubblechart_linegraph() {

  $chart = array(
    'id' => 'visualization',
    'type' => 'linegraph',
    'legend' => array(
      'Development',
      'QA',
      'Strategy',
      'Design',
    ),
    'rows' => array(
      array('1st Quarter 2011',10,20,26,35),
      array('2nd Quarter 2011',20,26,27,37),
      array('3rd Quarter 2011',10,50,28,50),
      array('4th Quarter 2011',15,76,49,51),
      array('1st Quarter 2012',20,100,50,52),
    ),
  );

  return d3_draw($chart);
}

function bubblechart_bubblechart() {

  $chart = array(
    'id' => 'visualization',
    'type' => 'bubblechart',
  );

  return d3_draw($chart);
}

function bubblechart_genomics() {
    // Create a Mongo connection and connect to database //echo $db;
    $mongo = new MongoClient("mongodb://localhost");
    $db = $mongo->cats;

    //Enter genes of interest
    $gene_list = array('RHEB', 'SKA1');

    // Select the expression collection for gene expression info
    //name,LogFC,size,PValue,AdjPValue
    $coll = $db->expression;


    //$query = array(array('GeneSymbol' => 'RHEB'), array('FileName' => 1, 'GeneSymbol' => 1, 'logFC' => 1, 'PValue' => 1, 'adjPVal' => 1, 'B' => 1)); // SELECT title FROM fields_current WHERE group_name = 'node' AND type = 'content-type'

    //Build query and run it
    $query = array("GeneSymbol" => array('$in' => $gene_list));
		$cursor = $coll->find($query);
		//$total = (string)$cursor->count(); //To find total number of documents
		$cursor->limit( 5 );

		//Access query results
		//$result = array();
		$result = array();
		$filenames = array();
		$i = 0;
		foreach ($cursor as $doc) {
			//var_dump($doc);
			$result[$i]['FileName'] = $doc['FileName'];
			$result[$i]['name'] = $doc['GeneSymbol'];
			$result[$i]['LogFC'] = $doc['logFC'];
			$result[$i]['PValue'] = $doc['PValue'];
			$result[$i]['adjPVal'] = $doc['adjPVal'];
			$filenames[] = $doc['FileName'];
			$i++;
		}
		//$result_string = implode('', $result);
		//var_dump($result_string);
		//$test = $filenames[1];
		var_dump($result);


		// Check the main for the meta data: Study,parent,DataType,Contrast
    $coll2 = $db->main;
    $query2 = array('FileName' => array('$in' => $filenames));
		$cursor2 = $coll2->find($query2);
		$main_result =  array();
		$i = 0;
		foreach ($cursor2 as $doc) {
			$main_result[$i]['FileName'] = $doc['FileName'];
			$main_result[$i]['Study'] = $doc['StudyName'];
			$main_result[$i]['parent'] = $doc['BrainRegionFull'];
			$main_result[$i]['DataType'] = $doc['DataType'];
			$main_result[$i]['Contrast'] = $doc['Contrast'];
			$i++;
		}
		var_dump($main_result);

	   //$merged_result = array_merge_recursive($result, $main_result);
		//var_dump($merged_result);



		$main_string = "This is a test!";

	return t($main_string);
}

?>
